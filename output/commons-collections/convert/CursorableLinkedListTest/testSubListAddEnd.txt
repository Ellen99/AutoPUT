/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.commons.collections4.list;

import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.NoSuchElementException;

import junit.framework.Test;

import org.apache.commons.collections4.BulkTest;
import org.junit.runner.RunWith;
import org.junit.experimental.theories.Theories;
import org.junit.experimental.theories.Theory;
import org.junit.experimental.theories.DataPoints;

/**
 * Test class.
 *
 * @version $Id$
 */
public @RunWith(Theories.class) class AutoPutTest<E> extends AbstractLinkedListTest<E> {
    public CursorableLinkedListTest(final String testName) {
        super(testName);
    }

    public static Test suite() {
        return BulkTest.makeSuite(CursorableLinkedListTest.class);
    }

    @Override
    public void setUp() {
        list = new CursorableLinkedList<>();
    }

    @Override
    public CursorableLinkedList<E> makeObject() {
        return new CursorableLinkedList<>();
    }

    @Theory
	@SuppressWarnings("unchecked")
    public void autoPutTest(Fixture fixture) {
        list.add((E) "A");
        list.add((E) "B");
        list.add((E) "C");
        list.add((E) "D");
        list.add((E) "E");

        final List<E> sublist = list.subList(fixture._input[0], fixture._input[1]);
        sublist.add((E) fixture._input[2]);
        assertEquals(fixture._expected[0], list.toString());
        assertEquals(fixture._expected[1], sublist.toString());
        sublist.add((E) fixture._input[3]);
        assertEquals(fixture._expected[2], list.toString());
        assertEquals(fixture._expected[3], sublist.toString());
    }

    /**
     *  Ignore the serialization tests for sublists and sub-sublists.
     *
     *  @return an array of sublist serialization test names
     */
    @Override
    public String[] ignoredTests() {
        final ArrayList<String> list = new ArrayList<>();
        final String prefix = "CursorableLinkedListTest";
        final String bulk = ".bulkTestSubList";
        final String[] ignored = new String[] {
                ".testEmptyListSerialization",
                ".testFullListSerialization",
                ".testEmptyListCompatibility",
                ".testFullListCompatibility",
                ".testSimpleSerialization",
                ".testCanonicalEmptyCollectionExists",
                ".testCanonicalFullCollectionExists",
                ".testSerializeDeserializeThenCompare"
        };
        for (final String element : ignored) {
            list.add(prefix + bulk + element);
            list.add(prefix + bulk + bulk + element);
        }
        return list.toArray(new String[0]);
    }

    @Override
    public String getCompatibilityVersion() {
        return "4";
    }

	private static Object[] INPUT1 = { 5, 5, "F", "G" };

	private static Object[] EXPECTED1 = { "[A, B, C, D, E, F]", "[F]", "[A, B, C, D, E, F, G]", "[F, G]" };

	private static Object[] INPUT2 = { 0, 0, "a", "b" };

	private static Object[] EXPECTED2 = { "[a, A, B, C, D, E]", "[a]", "[a, b, A, B, C, D, E]", "[a, b]" };

	private static Object[] INPUT3 = { 1, 3, "a", "b" };

	private static Object[] EXPECTED3 = { "[A, B, C, a, D, E]", "[B, C, a]", "[A, B, C, a, b, D, E]", "[B, C, a, b]" };

	@DataPoints public static Fixture[] DATA={new Fixture(INPUT1,EXPECTED1),new Fixture(INPUT2,EXPECTED2),new Fixture(INPUT3,EXPECTED3)};

	public static class Fixture {
		private Object[] _input;
		private String[] _expected;

		public Fixture(Object[] _input, String[] _expected) {
			this._input = _input;
			this._expected = _expected;
		}
	}

//    public void testCreate() throws Exception {
//        resetEmpty();
//        writeExternalFormToDisk((java.io.Serializable) getCollection(), "src/test/resources/data/test/CursorableLinkedList.emptyCollection.version4.obj");
//        resetFull();
//        writeExternalFormToDisk((java.io.Serializable) getCollection(), "src/test/resources/data/test/CursorableLinkedList.fullCollection.version4.obj");
//    }

}