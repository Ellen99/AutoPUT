/*
 *  Copyright 2001-2013 Stephen Colebourne
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.joda.time.chrono;

import java.util.Locale;
import java.util.TimeZone;

import junit.framework.TestCase;
import junit.framework.TestSuite;

import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeConstants;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationFieldType;
import org.joda.time.DateTime.Property;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameters;

/**
 * This class is a Junit unit test for IslamicChronology.
 *
 * @author Stephen Colebourne
 */
public @RunWith(Parameterized.class) class TestIslamicChronology extends TestCase {

    public static void main(String[] args) {
        junit.textui.TestRunner.run(suite());
    }

    public static TestSuite suite() {
        SKIP = 1 * DateTimeConstants.MILLIS_PER_DAY;
        return new TestSuite(TestIslamicChronology.class);
    }

    protected void setUp() throws Exception {
        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
        originalDateTimeZone = DateTimeZone.getDefault();
        originalTimeZone = TimeZone.getDefault();
        originalLocale = Locale.getDefault();
        DateTimeZone.setDefault(LONDON);
        TimeZone.setDefault(TimeZone.getTimeZone("Europe/London"));
        Locale.setDefault(Locale.UK);
    }

    protected void tearDown() throws Exception {
        DateTimeUtils.setCurrentMillisSystem();
        DateTimeZone.setDefault(originalDateTimeZone);
        TimeZone.setDefault(originalTimeZone);
        Locale.setDefault(originalLocale);
        originalDateTimeZone = null;
        originalTimeZone = null;
        originalLocale = null;
    }

    public void test15BasedLeapYear() {
        assertEquals(false, _input[0].isLeapYear(1));
        assertEquals(true, _input[1].isLeapYear(2));
        assertEquals(false, _input[2].isLeapYear(3));
        assertEquals(false, _input[3].isLeapYear(4));
        assertEquals(true, _input[4].isLeapYear(5));
        assertEquals(false, _input[5].isLeapYear(6));
        assertEquals(_expected[0], _input[6].isLeapYear(7));
        assertEquals(_expected[1], _input[7].isLeapYear(8));
        assertEquals(false, _input[8].isLeapYear(9));
        assertEquals(_expected[2], _input[9].isLeapYear(10));
        assertEquals(_expected[3], _input[10].isLeapYear(11));
        assertEquals(false, _input[11].isLeapYear(12));
        assertEquals(true, _input[12].isLeapYear(13));
        assertEquals(false, _input[13].isLeapYear(14));
        assertEquals(_expected[4], _input[14].isLeapYear(15));
        assertEquals(_expected[5], _input[15].isLeapYear(16));
        assertEquals(false, _input[16].isLeapYear(17));
        assertEquals(_expected[6], _input[17].isLeapYear(18));
        assertEquals(_expected[7], _input[18].isLeapYear(19));
        assertEquals(false, _input[19].isLeapYear(20));
        assertEquals(true, _input[20].isLeapYear(21));
        assertEquals(false, _input[21].isLeapYear(22));
        assertEquals(false, _input[22].isLeapYear(23));
        assertEquals(true, _input[23].isLeapYear(24));
        assertEquals(false, _input[24].isLeapYear(25));
        assertEquals(_expected[8], _input[25].isLeapYear(26));
        assertEquals(_expected[9], _input[26].isLeapYear(27));
        assertEquals(false, _input[27].isLeapYear(28));
        assertEquals(_expected[10], _input[28].isLeapYear(29));
        assertEquals(_expected[11], _input[29].isLeapYear(30));
    }

    @Parameters public static Collection<Object[]> data(){return Arrays.asList(new Object[][]{{{IslamicChronology.LEAP_YEAR_15_BASED,IslamicChronology.LEAP_YEAR_15_BASED,IslamicChronology.LEAP_YEAR_15_BASED,IslamicChronology.LEAP_YEAR_15_BASED,IslamicChronology.LEAP_YEAR_15_BASED,IslamicChronology.LEAP_YEAR_15_BASED,IslamicChronology.LEAP_YEAR_15_BASED,IslamicChronology.LEAP_YEAR_15_BASED,IslamicChronology.LEAP_YEAR_15_BASED,IslamicChronology.LEAP_YEAR_15_BASED,IslamicChronology.LEAP_YEAR_15_BASED,IslamicChronology.LEAP_YEAR_15_BASED,IslamicChronology.LEAP_YEAR_15_BASED,IslamicChronology.LEAP_YEAR_15_BASED,IslamicChronology.LEAP_YEAR_15_BASED,IslamicChronology.LEAP_YEAR_15_BASED,IslamicChronology.LEAP_YEAR_15_BASED,IslamicChronology.LEAP_YEAR_15_BASED,IslamicChronology.LEAP_YEAR_15_BASED,IslamicChronology.LEAP_YEAR_15_BASED,IslamicChronology.LEAP_YEAR_15_BASED,IslamicChronology.LEAP_YEAR_15_BASED,IslamicChronology.LEAP_YEAR_15_BASED,IslamicChronology.LEAP_YEAR_15_BASED,IslamicChronology.LEAP_YEAR_15_BASED,IslamicChronology.LEAP_YEAR_15_BASED,IslamicChronology.LEAP_YEAR_15_BASED,IslamicChronology.LEAP_YEAR_15_BASED,IslamicChronology.LEAP_YEAR_15_BASED,IslamicChronology.LEAP_YEAR_15_BASED},{true,false,true,false,true,false,true,false,true,false,true,false}},{{IslamicChronology.LEAP_YEAR_16_BASED,IslamicChronology.LEAP_YEAR_16_BASED,IslamicChronology.LEAP_YEAR_16_BASED,IslamicChronology.LEAP_YEAR_16_BASED,IslamicChronology.LEAP_YEAR_16_BASED,IslamicChronology.LEAP_YEAR_16_BASED,IslamicChronology.LEAP_YEAR_16_BASED,IslamicChronology.LEAP_YEAR_16_BASED,IslamicChronology.LEAP_YEAR_16_BASED,IslamicChronology.LEAP_YEAR_16_BASED,IslamicChronology.LEAP_YEAR_16_BASED,IslamicChronology.LEAP_YEAR_16_BASED,IslamicChronology.LEAP_YEAR_16_BASED,IslamicChronology.LEAP_YEAR_16_BASED,IslamicChronology.LEAP_YEAR_16_BASED,IslamicChronology.LEAP_YEAR_16_BASED,IslamicChronology.LEAP_YEAR_16_BASED,IslamicChronology.LEAP_YEAR_16_BASED,IslamicChronology.LEAP_YEAR_16_BASED,IslamicChronology.LEAP_YEAR_16_BASED,IslamicChronology.LEAP_YEAR_16_BASED,IslamicChronology.LEAP_YEAR_16_BASED,IslamicChronology.LEAP_YEAR_16_BASED,IslamicChronology.LEAP_YEAR_16_BASED,IslamicChronology.LEAP_YEAR_16_BASED,IslamicChronology.LEAP_YEAR_16_BASED,IslamicChronology.LEAP_YEAR_16_BASED,IslamicChronology.LEAP_YEAR_16_BASED,IslamicChronology.LEAP_YEAR_16_BASED,IslamicChronology.LEAP_YEAR_16_BASED},{true,false,true,false,false,true,true,false,true,false,true,false}},{{IslamicChronology.LEAP_YEAR_INDIAN,IslamicChronology.LEAP_YEAR_INDIAN,IslamicChronology.LEAP_YEAR_INDIAN,IslamicChronology.LEAP_YEAR_INDIAN,IslamicChronology.LEAP_YEAR_INDIAN,IslamicChronology.LEAP_YEAR_INDIAN,IslamicChronology.LEAP_YEAR_INDIAN,IslamicChronology.LEAP_YEAR_INDIAN,IslamicChronology.LEAP_YEAR_INDIAN,IslamicChronology.LEAP_YEAR_INDIAN,IslamicChronology.LEAP_YEAR_INDIAN,IslamicChronology.LEAP_YEAR_INDIAN,IslamicChronology.LEAP_YEAR_INDIAN,IslamicChronology.LEAP_YEAR_INDIAN,IslamicChronology.LEAP_YEAR_INDIAN,IslamicChronology.LEAP_YEAR_INDIAN,IslamicChronology.LEAP_YEAR_INDIAN,IslamicChronology.LEAP_YEAR_INDIAN,IslamicChronology.LEAP_YEAR_INDIAN,IslamicChronology.LEAP_YEAR_INDIAN,IslamicChronology.LEAP_YEAR_INDIAN,IslamicChronology.LEAP_YEAR_INDIAN,IslamicChronology.LEAP_YEAR_INDIAN,IslamicChronology.LEAP_YEAR_INDIAN,IslamicChronology.LEAP_YEAR_INDIAN,IslamicChronology.LEAP_YEAR_INDIAN,IslamicChronology.LEAP_YEAR_INDIAN,IslamicChronology.LEAP_YEAR_INDIAN,IslamicChronology.LEAP_YEAR_INDIAN,IslamicChronology.LEAP_YEAR_INDIAN},{false,true,true,false,false,true,false,true,false,true,true,false}},{{IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB,IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB,IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB,IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB,IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB,IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB,IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB,IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB,IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB,IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB,IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB,IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB,IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB,IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB,IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB,IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB,IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB,IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB,IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB,IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB,IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB,IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB,IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB,IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB,IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB,IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB,IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB,IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB,IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB,IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB},{false,true,false,true,false,true,false,true,false,true,false,true}}});}

	private Object[] _input;

	private boolean[] _expected;

	public AutoPUT(Object[] _input, boolean[] _expected) {
		this._input = _input;
		this._expected = _expected;
	}

}