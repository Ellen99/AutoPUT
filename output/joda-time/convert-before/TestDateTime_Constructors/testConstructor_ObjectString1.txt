/*
 *  Copyright 2001-2015 Stephen Colebourne
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.joda.time;

import java.util.Date;
import java.util.Locale;

import junit.framework.TestCase;
import junit.framework.TestSuite;

import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.convert.ConverterManager;
import org.joda.time.convert.MockZeroNullIntegerConverter;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameters;

/**
 * This class is a Junit unit test for DateTime.
 *
 * @author Stephen Colebourne
 */
public @RunWith(Parameterized.class) class TestDateTime_Constructors extends TestCase {
    // Test in 2002/03 as time zones are more well known
    // (before the late 90's they were all over the place)

    public static void main(String[] args) {
        junit.textui.TestRunner.run(suite());
    }

    public static TestSuite suite() {
        return new TestSuite(TestDateTime_Constructors.class);
    }

    protected void setUp() throws Exception {
        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
        zone = DateTimeZone.getDefault();
        locale = Locale.getDefault();
        DateTimeZone.setDefault(LONDON);
        java.util.TimeZone.setDefault(LONDON.toTimeZone());
        Locale.setDefault(Locale.UK);
    }

    protected void tearDown() throws Exception {
        DateTimeUtils.setCurrentMillisSystem();
        DateTimeZone.setDefault(zone);
        java.util.TimeZone.setDefault(zone.toTimeZone());
        Locale.setDefault(locale);
        zone = null;
    }

    public void testConstructor_ObjectString1() throws Throwable {
        DateTime test = new DateTime(_input);
        assertEquals(ISOChronology.getInstance(), test.getChronology());
        assertEquals(_expected[0], test.getYear());
        assertEquals(_expected[1], test.getMonthOfYear());
        assertEquals(_expected[2], test.getDayOfMonth());
        assertEquals(_expected[3], test.getHourOfDay());
        assertEquals(_expected[4], test.getMinuteOfHour());
        assertEquals(_expected[5], test.getSecondOfMinute());
        assertEquals(_expected[6], test.getMillisOfSecond());
    }

    @Parameters public static Collection<Object[]> data(){return Arrays.asList(new Object[][]{{"1972-12-03",{1972,12,3,0,0,0,0}},{"2006-06-03T+14:00",{2006,6,2,11,0,0,0}},{"1972-12-03T10:20:30.040",{1972,12,3,10,20,30,40}},{"2006-06-03T10:20:30.040+14:00",{2006,6,2,21,20,30,40}},{"T10:20:30.040",{1970,1,1,10,20,30,40}},{"T10:20:30.040+14:00",{1969,12,31,21,20,30,40}},{"10",{10,1,1,0,0,0,0}}});}

	private String _input;
	private double[] _expected;

	public AutoPUT(String _input, double[] _expected) {
		this._input = _input;
		this._expected = _expected;
	}

}