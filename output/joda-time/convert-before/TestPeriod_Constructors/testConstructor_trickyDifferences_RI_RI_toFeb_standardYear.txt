/*
 *  Copyright 2001-2013 Stephen Colebourne
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.joda.time;

import java.util.Locale;
import java.util.TimeZone;

import junit.framework.TestCase;
import junit.framework.TestSuite;

import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.ISOChronology;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameters;

/**
 * This class is a JUnit test for Duration.
 *
 * @author Stephen Colebourne
 */
public @RunWith(Parameterized.class) class TestPeriod_Constructors extends TestCase {
    // Test in 2002/03 as time zones are more well known
    // (before the late 90's they were all over the place)

    public static void main(String[] args) {
        junit.textui.TestRunner.run(suite());
    }

    public static TestSuite suite() {
        return new TestSuite(TestPeriod_Constructors.class);
    }

    protected void setUp() throws Exception {
        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
        originalDateTimeZone = DateTimeZone.getDefault();
        originalTimeZone = TimeZone.getDefault();
        originalLocale = Locale.getDefault();
        DateTimeZone.setDefault(LONDON);
        TimeZone.setDefault(TimeZone.getTimeZone("Europe/London"));
        Locale.setDefault(Locale.UK);
    }

    protected void tearDown() throws Exception {
        DateTimeUtils.setCurrentMillisSystem();
        DateTimeZone.setDefault(originalDateTimeZone);
        TimeZone.setDefault(originalTimeZone);
        Locale.setDefault(originalLocale);
        originalDateTimeZone = null;
        originalTimeZone = null;
        originalLocale = null;
    }

    //-------------------------------------------------------------------------
    public void testConstructor_trickyDifferences_RI_RI_toFeb_standardYear() throws Throwable {
        DateTime dt1 = new DateTime(_input[0], 1, _input[1], 0, 0);
        DateTime dt2 = new DateTime(_input[2], _input[3], _input[4], 0, 0);
        Period test = new Period(dt1, dt2);
        assertEquals(PeriodType.standard(), test.getPeriodType());
        assertEquals(new Period(0, _input[5], _input[6], _input[7], 0, 0, 0, 0), test);
    }

    @Parameters public static Collection<Object[]> data(){return Arrays.asList(new Object[][]{{{2011,1,2011,2,28,1,3,6},{}},{{2012,1,2012,2,29,1,4,0},{}},{{2004,28,2005,2,28,2,0,0},{}},{{2004,29,2005,2,28,2,0,0},{}},{{2004,30,2005,2,28,2,0,0},{}},{{2004,31,2005,2,28,2,0,0},{}},{{2013,31,2013,3,30,1,4,2},{}},{{2013,31,2013,3,31,2,0,0},{}}});}

	private double[] _input;
	private Object _expected;

	public AutoPUT(double[] _input, Object _expected) {
		this._input = _input;
		this._expected = _expected;
	}

}