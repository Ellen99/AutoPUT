/*
 *  Copyright 2001-2005 Stephen Colebourne
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.joda.time.format;

import java.util.Locale;
import java.util.TimeZone;

import junit.framework.TestCase;
import junit.framework.TestSuite;

import org.joda.time.DateTimeConstants;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameters;

/**
 * This class is a Junit unit test for ISOPeriodFormat.
 *
 * @author Stephen Colebourne
 */
public @RunWith(Parameterized.class) class TestISOPeriodFormatParsing extends TestCase {

    public static void main(String[] args) {
        junit.textui.TestRunner.run(suite());
    }

    public static TestSuite suite() {
        return new TestSuite(TestISOPeriodFormatParsing.class);
    }

    protected void setUp() throws Exception {
        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
        originalDateTimeZone = DateTimeZone.getDefault();
        originalTimeZone = TimeZone.getDefault();
        originalLocale = Locale.getDefault();
        DateTimeZone.setDefault(LONDON);
        TimeZone.setDefault(TimeZone.getTimeZone("Europe/London"));
        Locale.setDefault(Locale.UK);
    }

    protected void tearDown() throws Exception {
        DateTimeUtils.setCurrentMillisSystem();
        DateTimeZone.setDefault(originalDateTimeZone);
        TimeZone.setDefault(originalTimeZone);
        Locale.setDefault(originalLocale);
        originalDateTimeZone = null;
        originalTimeZone = null;
        originalLocale = null;
    }

    //-----------------------------------------------------------------------
    public void testParseStandard1() {
        PeriodFormatter parser = ISOPeriodFormat.standard();
        Period p = parser.parsePeriod(_input[0]);
        assertEquals(new Period(_input[1], _input[2], _input[3], _input[4], _input[5], _input[6], _input[7], _input[8]), p);
    }

    @Parameters public static Collection<Object[]> data(){return Arrays.asList(new Object[][]{{{"P1Y2M3W4DT5H6M7.008S",1,2,3,4,5,6,7,8},{}},{{"P0Y0M0W0DT5H6M7.008S",0,0,0,0,5,6,7,8},{}},{{"P0DT5H6M7.008S",0,0,0,0,5,6,7,8},{}},{{"P2Y3DT5H6M7.008S",2,0,0,3,5,6,7,8},{}},{{"P2YT5H6M7.008S",2,0,0,0,5,6,7,8},{}},{{"PT5H6M7.008S",0,0,0,0,5,6,7,8},{}},{{"P1Y2M3W4D",1,2,3,4,0,0,0,0},{}},{{"PT5H6M7S",0,0,0,0,5,6,7,0},{}},{{"PT0S",0,0,0,0,0,0,0,0},{}},{{"P0D",0,0,0,0,0,0,0,0},{}},{{"P0Y",0,0,0,0,0,0,0,0},{}}});}

	private Object[] _input;
	private Object _expected;

	public AutoPUT(Object[] _input, Object _expected) {
		this._input = _input;
		this._expected = _expected;
	}

}