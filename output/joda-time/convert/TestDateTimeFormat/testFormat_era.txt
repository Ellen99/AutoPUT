/*
 *  Copyright 2001-2006 Stephen Colebourne
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.joda.time.format;

import java.util.Locale;
import java.util.TimeZone;

import junit.framework.TestCase;
import junit.framework.TestSuite;

import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeConstants;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.chrono.GJChronology;
import org.joda.time.tz.DefaultNameProvider;
import org.joda.time.tz.NameProvider;
import org.junit.runner.RunWith;
import org.junit.experimental.theories.Theories;
import org.junit.experimental.theories.Theory;
import org.junit.experimental.theories.DataPoints;

/**
 * This class is a Junit unit test for DateTime Formating.
 *
 * @author Stephen Colebourne
 * @author Fredrik Borgh
 */
public @RunWith(Theories.class) class AutoPutTest extends TestCase {

    public static void main(String[] args) {
        junit.textui.TestRunner.run(suite());
    }

    public static TestSuite suite() {
        return new TestSuite(TestDateTimeFormat.class);
    }

    public TestDateTimeFormat(String name) {
        super(name);
    }

    protected void setUp() throws Exception {
        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
        originalDateTimeZone = DateTimeZone.getDefault();
        originalTimeZone = TimeZone.getDefault();
        originalLocale = Locale.getDefault();
        DateTimeZone.setDefault(LONDON);
        TimeZone.setDefault(TimeZone.getTimeZone("Europe/London"));
        Locale.setDefault(Locale.UK);
    }

    protected void tearDown() throws Exception {
        DateTimeUtils.setCurrentMillisSystem();
        DateTimeZone.setDefault(originalDateTimeZone);
        TimeZone.setDefault(originalTimeZone);
        Locale.setDefault(originalLocale);
        originalDateTimeZone = null;
        originalTimeZone = null;
        originalLocale = null;
    }

    //-----------------------------------------------------------------------
    @Theory
	public void autoPutTest(Fixture fixture) {
        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);
        DateTimeFormatter f = DateTimeFormat.forPattern(fixture._input[0]).withLocale(fixture._input[1]);
        assertEquals(dt.toString(), fixture._expected[0], f.print(dt));
        
        dt = dt.withZone(NEWYORK);
        assertEquals(dt.toString(), fixture._expected[1], f.print(dt));
        
        dt = dt.withZone(PARIS);
        assertEquals(dt.toString(), fixture._expected[2], f.print(dt));
    }

    //-----------------------------------------------------------------------
    private void check(DateTime test, int hour, int min, int sec) {
        assertEquals(hour, test.getYear());
        assertEquals(min, test.getMonthOfYear());
        assertEquals(sec, test.getDayOfMonth());
    }

	private static Object[] INPUT1 = { "G", Locale.UK };

	private static Object[] EXPECTED1 = { "AD", "AD", "AD" };

	private static Object[] INPUT2 = { "w", Locale.UK };

	private static Object[] EXPECTED2 = { "24", "24", "24" };

	private static Object[] INPUT3 = { "e", Locale.UK };

	private static Object[] EXPECTED3 = { "3", "3", "3" };

	private static Object[] INPUT4 = { "D", Locale.UK };

	private static Object[] EXPECTED4 = { "161", "161", "161" };

	private static Object[] INPUT5 = { "M", Locale.UK };

	private static Object[] EXPECTED5 = { "6", "6", "6" };

	private static Object[] INPUT6 = { "d", Locale.UK };

	private static Object[] EXPECTED6 = { "9", "9", "9" };

	private static Object[] INPUT7 = { "m", Locale.UK };

	private static Object[] EXPECTED7 = { "20", "20", "20" };

	private static Object[] INPUT8 = { "s", Locale.UK };

	private static Object[] EXPECTED8 = { "30", "30", "30" };

	private static Object[] INPUT9 = { "SSS", Locale.UK };

	private static Object[] EXPECTED9 = { "040", "040", "040" };

	private static Object[] INPUT10 = { "SSSSSS", Locale.UK };

	private static Object[] EXPECTED10 = { "040000", "040000", "040000" };

	private static Object[] INPUT11 = { "z", Locale.ENGLISH };

	private static Object[] EXPECTED11 = { "UTC", "EDT", "JST" };

	private static Object[] INPUT12 = { "zzzz", Locale.ENGLISH };

	private static Object[] EXPECTED12 = { "Coordinated Universal Time", "Eastern Daylight Time",
			"Japan Standard Time" };

	private static Object[] INPUT13 = { "Z", Locale.UK };

	private static Object[] EXPECTED13 = { "+0000", "-0400", "+0900" };

	private static Object[] INPUT14 = { "ZZ", Locale.UK };

	private static Object[] EXPECTED14 = { "+00:00", "-04:00", "+09:00" };

	private static Object[] INPUT15 = { "ZZZ", Locale.UK };

	private static Object[] EXPECTED15 = { "UTC", "America/New_York", "Asia/Tokyo" };

	@DataPoints public static Fixture[] DATA={new Fixture(INPUT1,EXPECTED1),new Fixture(INPUT2,EXPECTED2),new Fixture(INPUT3,EXPECTED3),new Fixture(INPUT4,EXPECTED4),new Fixture(INPUT5,EXPECTED5),new Fixture(INPUT6,EXPECTED6),new Fixture(INPUT7,EXPECTED7),new Fixture(INPUT8,EXPECTED8),new Fixture(INPUT9,EXPECTED9),new Fixture(INPUT10,EXPECTED10),new Fixture(INPUT11,EXPECTED11),new Fixture(INPUT12,EXPECTED12),new Fixture(INPUT13,EXPECTED13),new Fixture(INPUT14,EXPECTED14),new Fixture(INPUT15,EXPECTED15)};

	public static class Fixture {
		private Object[] _input;
		private String[] _expected;

		public Fixture(Object[] _input, String[] _expected) {
			this._input = _input;
			this._expected = _expected;
		}
	}

}