/*
 *  Copyright 2001-2013 Stephen Colebourne
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.joda.time;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Arrays;
import java.util.Locale;

import junit.framework.TestCase;
import junit.framework.TestSuite;

import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.junit.runner.RunWith;
import org.junit.experimental.theories.Theories;
import org.junit.experimental.theories.Theory;
import org.junit.experimental.theories.DataPoints;

/**
 * This class is a Junit unit test for LocalTime.
 *
 * @author Stephen Colebourne
 */
public @RunWith(Theories.class) class AutoPutTest extends TestCase {

    

//    private long TEST_TIME1 =
//        1L * DateTimeConstants.MILLIS_PER_HOUR
//        + 2L * DateTimeConstants.MILLIS_PER_MINUTE
//        + 3L * DateTimeConstants.MILLIS_PER_SECOND
//        + 4L;

    public static void main(String[] args) {
        junit.textui.TestRunner.run(suite());
    }

    public static TestSuite suite() {
        return new TestSuite(TestLocalTime_Basics.class);
    }

    public TestLocalTime_Basics(String name) {
        super(name);
    }

    protected void setUp() throws Exception {
        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
        zone = DateTimeZone.getDefault();
        DateTimeZone.setDefault(LONDON);
    }

    protected void tearDown() throws Exception {
        DateTimeUtils.setCurrentMillisSystem();
        DateTimeZone.setDefault(zone);
        zone = null;
    }

    class MockInstant extends MockPartial {
        public Chronology getChronology() {
            return COPTIC_UTC;
        }
        public DateTimeField[] getFields() {
            return new DateTimeField[] {
                COPTIC_UTC.hourOfDay(),
                COPTIC_UTC.minuteOfHour(),
                COPTIC_UTC.secondOfMinute(),
                COPTIC_UTC.millisOfSecond(),
            };
        }
        public int[] getValues() {
            return new int[] {10, 20, 30, 40};
        }
    }

    @Theory
	public void autoPutTest(Fixture fixture) {
        LocalTime test = new LocalTime(fixture._input[0], fixture._input[1], fixture._input[2], fixture._input[3]);
        LocalTime result = test.withFieldAdded(DurationFieldType.millis(), fixture._input[4]);
        assertEquals(new LocalTime(fixture._input[5], fixture._input[6], fixture._input[7], fixture._input[8]), result);
        
        test = new LocalTime(fixture._input[9], fixture._input[10], fixture._input[11], fixture._input[12]);
        result = test.withFieldAdded(DurationFieldType.seconds(), fixture._input[13]);
        assertEquals(new LocalTime(fixture._input[14], fixture._input[15], fixture._input[16], fixture._input[17]), result);
        
        test = new LocalTime(fixture._input[18], fixture._input[19], fixture._input[20], fixture._input[21]);
        result = test.withFieldAdded(DurationFieldType.minutes(), fixture._input[22]);
        assertEquals(new LocalTime(fixture._input[23], fixture._input[24], fixture._input[25], fixture._input[26]), result);
        
        test = new LocalTime(fixture._input[27], fixture._input[28], fixture._input[29], fixture._input[30]);
        result = test.withFieldAdded(DurationFieldType.hours(), fixture._input[31]);
        assertEquals(new LocalTime(fixture._input[32], fixture._input[33], fixture._input[34], fixture._input[35]), result);
    }

    //-----------------------------------------------------------------------
    private void check(LocalTime test, int hour, int min, int sec, int milli) {
        assertEquals(hour, test.getHourOfDay());
        assertEquals(min, test.getMinuteOfHour());
        assertEquals(sec, test.getSecondOfMinute());
        assertEquals(milli, test.getMillisOfSecond());
    }

	private static double[] INPUT1 = { 23, 59, 59, 999, 1, 0, 0, 0, 0, 23, 59, 59, 999, 1, 0, 0, 0, 999, 23, 59, 59,
			999, 1, 0, 0, 59, 999, 23, 59, 59, 999, 1, 0, 59, 59, 999 };

	private static double[] EXPECTED1 = null;

	private static double[] INPUT2 = { 0, 0, 0, 0, -1, 23, 59, 59, 999, 0, 0, 0, 0, -1, 23, 59, 59, 0, 0, 0, 0, 0, -1,
			23, 59, 0, 0, 0, 0, 0, 0, -1, 23, 0, 0, 0 };

	private static double[] EXPECTED2 = null;

	@DataPoints public static Fixture[] DATA={new Fixture(INPUT1,EXPECTED1),new Fixture(INPUT2,EXPECTED2)};

	public static class Fixture {
		private double[] _input;
		private Object _expected;

		public Fixture(double[] _input, Object _expected) {
			this._input = _input;
			this._expected = _expected;
		}
	}
}