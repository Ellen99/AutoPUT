/*
 *  Copyright 2001-2015 Stephen Colebourne
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.joda.time;

import java.util.Date;
import java.util.Locale;

import junit.framework.TestCase;
import junit.framework.TestSuite;

import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.convert.ConverterManager;
import org.joda.time.convert.MockZeroNullIntegerConverter;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.junit.runner.RunWith;
import org.junit.experimental.theories.Theories;
import org.junit.experimental.theories.Theory;
import org.junit.experimental.theories.DataPoints;

/**
 * This class is a Junit unit test for DateTime.
 *
 * @author Stephen Colebourne
 */
public @RunWith(Theories.class) class AutoPutTest extends TestCase {
    // Test in 2002/03 as time zones are more well known
    // (before the late 90's they were all over the place)

    public static void main(String[] args) {
        junit.textui.TestRunner.run(suite());
    }

    public static TestSuite suite() {
        return new TestSuite(TestDateTime_Constructors.class);
    }

    public TestDateTime_Constructors(String name) {
        super(name);
    }

    protected void setUp() throws Exception {
        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
        zone = DateTimeZone.getDefault();
        locale = Locale.getDefault();
        DateTimeZone.setDefault(LONDON);
        java.util.TimeZone.setDefault(LONDON.toTimeZone());
        Locale.setDefault(Locale.UK);
    }

    protected void tearDown() throws Exception {
        DateTimeUtils.setCurrentMillisSystem();
        DateTimeZone.setDefault(zone);
        java.util.TimeZone.setDefault(zone.toTimeZone());
        Locale.setDefault(locale);
        zone = null;
    }

    @Theory
	public void autoPutTest(Fixture fixture) throws Throwable {
        DateTime test = new DateTime(_input.fixture);
        assertEquals(ISOChronology.getInstance(), test.getChronology());
        assertEquals(fixture._expected[0], test.getYear());
        assertEquals(fixture._expected[1], test.getMonthOfYear());
        assertEquals(fixture._expected[2], test.getDayOfMonth());
        assertEquals(fixture._expected[3], test.getHourOfDay());
        assertEquals(fixture._expected[4], test.getMinuteOfHour());
        assertEquals(fixture._expected[5], test.getSecondOfMinute());
        assertEquals(fixture._expected[6], test.getMillisOfSecond());
    }

    private static String INPUT1 = "1972-12-03";

	private static String EXPECTED1 = { 1972, 12, 3, 0, 0, 0, 0 };

	private static String INPUT2 = "2006-06-03T+14:00";

	private static String EXPECTED2 = { 2006, 6, 2, 11, 0, 0, 0 };

	private static String INPUT3 = "1972-12-03T10:20:30.040";

	private static String EXPECTED3 = { 1972, 12, 3, 10, 20, 30, 40 };

	private static String INPUT4 = "2006-06-03T10:20:30.040+14:00";

	private static String EXPECTED4 = { 2006, 6, 2, 21, 20, 30, 40 };

	private static String INPUT5 = "T10:20:30.040";

	private static String EXPECTED5 = { 1970, 1, 1, 10, 20, 30, 40 };

	private static String INPUT6 = "T10:20:30.040+14:00";

	private static String EXPECTED6 = { 1969, 12, 31, 21, 20, 30, 40 };

	private static String INPUT7 = "10";

	private static String EXPECTED7 = { 10, 1, 1, 0, 0, 0, 0 };

	@DataPoints public static Fixture[] DATA={new Fixture(INPUT1,EXPECTED1),new Fixture(INPUT2,EXPECTED2),new Fixture(INPUT3,EXPECTED3),new Fixture(INPUT4,EXPECTED4),new Fixture(INPUT5,EXPECTED5),new Fixture(INPUT6,EXPECTED6),new Fixture(INPUT7,EXPECTED7)};

	public static class Fixture {
		private String _input;
		private double[] _expected;

		public Fixture(String _input, double[] _expected) {
			this._input = _input;
			this._expected = _expected;
		}
	}

}