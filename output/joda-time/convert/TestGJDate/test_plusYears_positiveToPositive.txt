/*
 *  Copyright 2001-2013 Stephen Colebourne
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.joda.time.chrono;

import junit.framework.TestCase;
import junit.framework.TestSuite;

import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDate;
import org.junit.runner.RunWith;
import org.junit.experimental.theories.Theories;
import org.junit.experimental.theories.Theory;
import org.junit.experimental.theories.DataPoints;

/**
 * Test.
 */
public @RunWith(Theories.class) class AutoPutTest extends TestCase {
    public static void main(String[] args) {
        junit.textui.TestRunner.run(suite());
    }

    public static TestSuite suite() {
        return new TestSuite(TestGJDate.class);
    }

    public TestGJDate(String name) {
        super(name);
    }

    protected void setUp() throws Exception {
    }

    protected void tearDown() throws Exception {
    }

    //-----------------------------------------------------------------------
    @Theory
	public void autoPutTest(Fixture fixture) {
        LocalDate date = new LocalDate(fixture._input[0], 6, 30, GJ_CHRONOLOGY);
        LocalDate expected = new LocalDate(_expected.fixture, 6, 30, GJ_CHRONOLOGY);
        assertEquals(expected, date.plusYears(fixture._input[1]));
    }

    private static double[] INPUT1 = { 3, 4 };

	private static double[] EXPECTED1 = 7;

	private static double[] INPUT2 = { 3, -3 };

	private static double[] EXPECTED2 = -1;

	private static double[] INPUT3 = { 3, -4 };

	private static double[] EXPECTED3 = -2;

	private static double[] INPUT4 = { -3, 2 };

	private static double[] EXPECTED4 = -1;

	private static double[] INPUT5 = { -3, 3 };

	private static double[] EXPECTED5 = 1;

	private static double[] INPUT6 = { -3, 4 };

	private static double[] EXPECTED6 = 2;

	private static double[] INPUT7 = { 3, 2004 };

	private static double[] EXPECTED7 = 2007;

	private static double[] INPUT8 = { 2003, -2003 };

	private static double[] EXPECTED8 = -1;

	private static double[] INPUT9 = { 2003, -2004 };

	private static double[] EXPECTED9 = -2;

	private static double[] INPUT10 = { -3, 2004 };

	private static double[] EXPECTED10 = 2002;

	@DataPoints public static Fixture[] DATA={new Fixture(INPUT1,EXPECTED1),new Fixture(INPUT2,EXPECTED2),new Fixture(INPUT3,EXPECTED3),new Fixture(INPUT4,EXPECTED4),new Fixture(INPUT5,EXPECTED5),new Fixture(INPUT6,EXPECTED6),new Fixture(INPUT7,EXPECTED7),new Fixture(INPUT8,EXPECTED8),new Fixture(INPUT9,EXPECTED9),new Fixture(INPUT10,EXPECTED10)};

	public static class Fixture {
		private double[] _input;
		private double _expected;

		public Fixture(double[] _input, double _expected) {
			this._input = _input;
			this._expected = _expected;
		}
	}

}