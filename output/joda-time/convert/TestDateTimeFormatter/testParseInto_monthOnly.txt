/*
 *  Copyright 2001-2016 Stephen Colebourne
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.joda.time.format;

import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.Writer;
import java.util.Locale;
import java.util.TimeZone;

import junit.framework.TestCase;
import junit.framework.TestSuite;

import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeConstants;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MutableDateTime;
import org.joda.time.ReadablePartial;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.junit.runner.RunWith;
import org.junit.experimental.theories.Theories;
import org.junit.experimental.theories.Theory;
import org.junit.experimental.theories.DataPoints;

/**
 * This class is a Junit unit test for DateTime Formating.
 *
 * @author Stephen Colebourne
 */
public @RunWith(Theories.class) class AutoPutTest extends TestCase {

    public static void main(String[] args) {
        junit.textui.TestRunner.run(suite());
    }

    public static TestSuite suite() {
        return new TestSuite(TestDateTimeFormatter.class);
    }

    public TestDateTimeFormatter(String name) {
        super(name);
    }

    protected void setUp() throws Exception {
        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
        originalDateTimeZone = DateTimeZone.getDefault();
        originalTimeZone = TimeZone.getDefault();
        originalLocale = Locale.getDefault();
        DateTimeZone.setDefault(LONDON);
        TimeZone.setDefault(TimeZone.getTimeZone("Europe/London"));
        Locale.setDefault(Locale.UK);
        f = new DateTimeFormatterBuilder()
                .appendDayOfWeekShortText()
                .appendLiteral(' ')
                .append(ISODateTimeFormat.dateTimeNoMillis())
                .toFormatter();
        g = ISODateTimeFormat.dateTimeNoMillis();
    }

    protected void tearDown() throws Exception {
        DateTimeUtils.setCurrentMillisSystem();
        DateTimeZone.setDefault(originalDateTimeZone);
        TimeZone.setDefault(originalTimeZone);
        Locale.setDefault(originalLocale);
        originalDateTimeZone = null;
        originalTimeZone = null;
        originalLocale = null;
        f = null;
        g = null;
    }

    

// This test fails, but since more related tests pass with the extra loop in DateTimeParserBucket
// I'm going to leave the change in and ignore this test
//    public void testParseLocalDate_weekyear_month_week_2013() {
//        Chronology chrono = GJChronology.getInstanceUTC();
//        DateTimeFormatter f = DateTimeFormat.forPattern("xxxx-MM-ww").withChronology(chrono);
//        assertEquals(new LocalDate(2012, 12, 31, chrono), f.parseLocalDate("2013-01-01"));
//    }

    @Theory
	public void autoPutTest(Fixture fixture) {
        DateTimeFormatter f = DateTimeFormat.forPattern(fixture._input[0]).withLocale(Locale.UK);
        MutableDateTime result = new MutableDateTime(2004, fixture._input[1], fixture._input[2], fixture._input[3], fixture._input[4], fixture._input[5], fixture._input[6], LONDON);
        assertEquals(_expected.fixture, f.parseInto(result, fixture._input[7], 0));
        assertEquals(new MutableDateTime(2004, fixture._input[8], fixture._input[9], fixture._input[10], fixture._input[11], fixture._input[12], fixture._input[13], LONDON), result);
    }

    private static class CustomDateTimePrinter implements DateTimePrinter {

        public int estimatePrintedLength() {
            return 2;
        }

        public void printTo(StringBuffer buf, long instant, Chronology chrono, int displayOffset,
                DateTimeZone displayZone, Locale locale) {
            buf.append("Hi");
        }

        public void printTo(Writer out, long instant, Chronology chrono, int displayOffset,
                DateTimeZone displayZone, Locale locale) throws IOException {
            out.write("Hi");
        }

        public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {
            buf.append("Hi");
        }

        public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException {
            out.write("Hi");
        }
    }

	private static Object[] INPUT1 = { "M", 1, 9, 12, 20, 30, 0, "5", 5, 9, 12, 20, 30, 0 };

	private static Object[] EXPECTED1 = 1;

	private static Object[] INPUT2 = { "M", 1, 1, 12, 20, 30, 0, "5", 5, 1, 12, 20, 30, 0 };

	private static Object[] EXPECTED2 = 1;

	private static Object[] INPUT3 = { "M", 2, 1, 12, 20, 30, 0, "1", 1, 1, 12, 20, 30, 0 };

	private static Object[] EXPECTED3 = 1;

	private static Object[] INPUT4 = { "M", 12, 31, 12, 20, 30, 0, "5", 5, 31, 12, 20, 30, 0 };

	private static Object[] EXPECTED4 = 1;

	private static Object[] INPUT5 = { "M", 1, 31, 12, 20, 30, 0, "12", 12, 31, 12, 20, 30, 0 };

	private static Object[] EXPECTED5 = 2;

	private static Object[] INPUT6 = { "M d", 1, 9, 12, 20, 30, 0, "2 29", 2, 29, 12, 20, 30, 0 };

	private static Object[] EXPECTED6 = 4;

	private static Object[] INPUT7 = { "M d", 1, 1, 0, 0, 0, 0, "2 29", 2, 29, 0, 0, 0, 0 };

	private static Object[] EXPECTED7 = 4;

	private static Object[] INPUT8 = { "M d", 12, 31, 23, 59, 59, 999, "2 29", 2, 29, 23, 59, 59, 999 };

	private static Object[] EXPECTED8 = 4;

	private static Object[] INPUT9 = { "M d", 1, 9, 12, 20, 30, 0, "2 29", 2, 29, 12, 20, 30, 0 };

	private static Object[] EXPECTED9 = 4;

	private static Object[] INPUT10 = { "M d", 1, 1, 0, 0, 0, 0, "2 29", 2, 29, 0, 0, 0, 0 };

	private static Object[] EXPECTED10 = 4;

	private static Object[] INPUT11 = { "M d", 12, 31, 23, 59, 59, 999, "2 29", 2, 29, 23, 59, 59, 999 };

	private static Object[] EXPECTED11 = 4;

	private static Object[] INPUT12 = { "M d", 1, 9, 12, 20, 30, 0, "2 29", 2, 29, 12, 20, 30, 0 };

	private static Object[] EXPECTED12 = 4;

	private static Object[] INPUT13 = { "M d", 1, 1, 0, 0, 0, 0, "2 29", 2, 29, 0, 0, 0, 0 };

	private static Object[] EXPECTED13 = 4;

	private static Object[] INPUT14 = { "M d", 12, 31, 23, 59, 59, 999, "2 29", 2, 29, 23, 59, 59, 999 };

	private static Object[] EXPECTED14 = 4;

	@DataPoints public static Fixture[] DATA={new Fixture(INPUT1,EXPECTED1),new Fixture(INPUT2,EXPECTED2),new Fixture(INPUT3,EXPECTED3),new Fixture(INPUT4,EXPECTED4),new Fixture(INPUT5,EXPECTED5),new Fixture(INPUT6,EXPECTED6),new Fixture(INPUT7,EXPECTED7),new Fixture(INPUT8,EXPECTED8),new Fixture(INPUT9,EXPECTED9),new Fixture(INPUT10,EXPECTED10),new Fixture(INPUT11,EXPECTED11),new Fixture(INPUT12,EXPECTED12),new Fixture(INPUT13,EXPECTED13),new Fixture(INPUT14,EXPECTED14)};

	public static class Fixture {
		private Object[] _input;
		private double _expected;

		public Fixture(Object[] _input, double _expected) {
			this._input = _input;
			this._expected = _expected;
		}
	}

}