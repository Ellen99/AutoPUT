/*
 *  Copyright 2001-2013 Stephen Colebourne
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.joda.time;

import java.util.Locale;
import java.util.TimeZone;

import junit.framework.TestCase;
import junit.framework.TestSuite;

import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.ISOChronology;
import org.junit.runner.RunWith;
import org.junit.experimental.theories.Theories;
import org.junit.experimental.theories.Theory;
import org.junit.experimental.theories.DataPoints;

/**
 * This class is a JUnit test for Duration.
 *
 * @author Stephen Colebourne
 */
public @RunWith(Theories.class) class AutoPutTest extends TestCase {
    // Test in 2002/03 as time zones are more well known
    // (before the late 90's they were all over the place)

    public static void main(String[] args) {
        junit.textui.TestRunner.run(suite());
    }

    public static TestSuite suite() {
        return new TestSuite(TestPeriod_Constructors.class);
    }

    public TestPeriod_Constructors(String name) {
        super(name);
    }

    protected void setUp() throws Exception {
        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
        originalDateTimeZone = DateTimeZone.getDefault();
        originalTimeZone = TimeZone.getDefault();
        originalLocale = Locale.getDefault();
        DateTimeZone.setDefault(LONDON);
        TimeZone.setDefault(TimeZone.getTimeZone("Europe/London"));
        Locale.setDefault(Locale.UK);
    }

    protected void tearDown() throws Exception {
        DateTimeUtils.setCurrentMillisSystem();
        DateTimeZone.setDefault(originalDateTimeZone);
        TimeZone.setDefault(originalTimeZone);
        Locale.setDefault(originalLocale);
        originalDateTimeZone = null;
        originalTimeZone = null;
        originalLocale = null;
    }

    //-------------------------------------------------------------------------
    @Theory
	public void autoPutTest(Fixture fixture) throws Throwable {
        LocalDate dt1 = new LocalDate(fixture._input[0], 1, fixture._input[1]);
        LocalDate dt2 = new LocalDate(fixture._input[2], fixture._input[3], fixture._input[4]);
        Period test = new Period(dt1, dt2);
        assertEquals(PeriodType.standard(), test.getPeriodType());
        assertEquals(new Period(0, fixture._input[5], fixture._input[6], fixture._input[7], 0, 0, 0, 0), test);
    }

    private static double[] INPUT1 = { 2011, 1, 2011, 2, 28, 1, 3, 6 };

	private static double[] EXPECTED1 = null;

	private static double[] INPUT2 = { 2012, 1, 2012, 2, 29, 1, 4, 0 };

	private static double[] EXPECTED2 = null;

	private static double[] INPUT3 = { 2004, 28, 2005, 2, 28, 2, 0, 0 };

	private static double[] EXPECTED3 = null;

	private static double[] INPUT4 = { 2004, 29, 2005, 2, 28, 2, 0, 0 };

	private static double[] EXPECTED4 = null;

	private static double[] INPUT5 = { 2004, 30, 2005, 2, 28, 2, 0, 0 };

	private static double[] EXPECTED5 = null;

	private static double[] INPUT6 = { 2004, 31, 2005, 2, 28, 2, 0, 0 };

	private static double[] EXPECTED6 = null;

	private static double[] INPUT7 = { 2013, 31, 2013, 3, 30, 1, 4, 2 };

	private static double[] EXPECTED7 = null;

	private static double[] INPUT8 = { 2013, 31, 2013, 3, 31, 2, 0, 0 };

	private static double[] EXPECTED8 = null;

	@DataPoints public static Fixture[] DATA={new Fixture(INPUT1,EXPECTED1),new Fixture(INPUT2,EXPECTED2),new Fixture(INPUT3,EXPECTED3),new Fixture(INPUT4,EXPECTED4),new Fixture(INPUT5,EXPECTED5),new Fixture(INPUT6,EXPECTED6),new Fixture(INPUT7,EXPECTED7),new Fixture(INPUT8,EXPECTED8)};

	public static class Fixture {
		private double[] _input;
		private Object _expected;

		public Fixture(double[] _input, Object _expected) {
			this._input = _input;
			this._expected = _expected;
		}
	}

}