/*
 *  Copyright 2001-2014 Stephen Colebourne
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.joda.time.format;

import java.text.DateFormat;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;

import junit.framework.TestCase;
import junit.framework.TestSuite;

import org.joda.time.DateTime;
import org.joda.time.DateTimeConstants;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.junit.runner.RunWith;
import org.junit.experimental.theories.Theories;
import org.junit.experimental.theories.Theory;
import org.junit.experimental.theories.DataPoints;

/**
 * This class is a Junit unit test for DateTimeFormat styles.
 *
 * @author Stephen Colebourne
 */
public @RunWith(Theories.class) class AutoPutTest extends TestCase {

    public static void main(String[] args) {
        junit.textui.TestRunner.run(suite());
    }

    public static TestSuite suite() {
        return new TestSuite(TestDateTimeFormatStyle.class);
    }

    public TestDateTimeFormatStyle(String name) {
        super(name);
    }

    protected void setUp() throws Exception {
        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
        originalDateTimeZone = DateTimeZone.getDefault();
        originalTimeZone = TimeZone.getDefault();
        originalLocale = Locale.getDefault();
        DateTimeZone.setDefault(LONDON);
        TimeZone.setDefault(TimeZone.getTimeZone("Europe/London"));
        Locale.setDefault(UK);
    }

    protected void tearDown() throws Exception {
        DateTimeUtils.setCurrentMillisSystem();
        DateTimeZone.setDefault(originalDateTimeZone);
        TimeZone.setDefault(originalTimeZone);
        Locale.setDefault(originalLocale);
        originalDateTimeZone = null;
        originalTimeZone = null;
        originalLocale = null;
    }

    //-----------------------------------------------------------------------
    @Theory
	public void autoPutTest(Fixture fixture) throws Exception {
        DateTimeFormatter f = DateTimeFormat.forStyle(fixture._input[0]);
        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 0);
        String expect = DateFormat.getDateTimeInstance(fixture._expected[0], fixture._expected[1], UK).format(dt.toDate());
        assertEquals(expect, f.print(dt));
        expect = DateFormat.getDateTimeInstance(fixture._input[1], fixture._input[2], US).format(dt.toDate());
        assertEquals(expect, f.withLocale(US).print(dt));
        expect = DateFormat.getDateTimeInstance(fixture._input[3], fixture._input[4], FRANCE).format(dt.toDate());
        assertEquals(expect, f.withLocale(FRANCE).print(dt));
    }

    private static Object[] INPUT1 = { "SM", DateFormat.SHORT, DateFormat.MEDIUM, DateFormat.SHORT, DateFormat.MEDIUM };

	private static Object[] EXPECTED1 = { DateFormat.SHORT, DateFormat.MEDIUM };

	private static Object[] INPUT2 = { "SL", DateFormat.SHORT, DateFormat.LONG, DateFormat.SHORT, DateFormat.LONG };

	private static Object[] EXPECTED2 = { DateFormat.SHORT, DateFormat.LONG };

	private static Object[] INPUT3 = { "SF", DateFormat.SHORT, DateFormat.FULL, DateFormat.SHORT, DateFormat.FULL };

	private static Object[] EXPECTED3 = { DateFormat.SHORT, DateFormat.FULL };

	private static Object[] INPUT4 = { "MS", DateFormat.MEDIUM, DateFormat.SHORT, DateFormat.MEDIUM, DateFormat.SHORT };

	private static Object[] EXPECTED4 = { DateFormat.MEDIUM, DateFormat.SHORT };

	private static Object[] INPUT5 = { "ML", DateFormat.MEDIUM, DateFormat.LONG, DateFormat.MEDIUM, DateFormat.LONG };

	private static Object[] EXPECTED5 = { DateFormat.MEDIUM, DateFormat.LONG };

	private static Object[] INPUT6 = { "MF", DateFormat.MEDIUM, DateFormat.FULL, DateFormat.MEDIUM, DateFormat.FULL };

	private static Object[] EXPECTED6 = { DateFormat.MEDIUM, DateFormat.FULL };

	@DataPoints public static Fixture[] DATA={new Fixture(INPUT1,EXPECTED1),new Fixture(INPUT2,EXPECTED2),new Fixture(INPUT3,EXPECTED3),new Fixture(INPUT4,EXPECTED4),new Fixture(INPUT5,EXPECTED5),new Fixture(INPUT6,EXPECTED6)};

	public static class Fixture {
		private Object[] _input;
		private double[] _expected;

		public Fixture(Object[] _input, double[] _expected) {
			this._input = _input;
			this._expected = _expected;
		}
	}

}