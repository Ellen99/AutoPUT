/*
 *  Copyright 2001-2014 Stephen Colebourne
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.joda.time.format;

import java.util.Locale;

import junit.framework.TestCase;
import junit.framework.TestSuite;

import org.joda.time.Period;
import org.junit.runner.RunWith;
import org.junit.experimental.theories.Theories;
import org.junit.experimental.theories.Theory;
import org.junit.experimental.theories.DataPoints;

/**
 * This class is a Junit unit test for PeriodFormat.
 *
 * @author Stephen Colebourne
 */
public @RunWith(Theories.class) class AutoPutTest extends TestCase {

    public static void main(String[] args) {
        junit.textui.TestRunner.run(suite());
    }

    public static TestSuite suite() {
        return new TestSuite(TestPeriodFormat.class);
    }

    public TestPeriodFormat(String name) {
        super(name);
    }

    protected void setUp() throws Exception {
        originalLocale = Locale.getDefault();
        Locale.setDefault(DE);
    }

    protected void tearDown() throws Exception {
        Locale.setDefault(originalLocale);
        originalLocale = null;
    }

    //-----------------------------------------------------------------------
    // Cross check languages
    //-----------------------------------------------------------------------
    @Theory
	public void autoPutTest(Fixture fixture) {
        Locale.setDefault(DE);
        Period p = new Period(0, 0, 0, 1, 5, 6, 7, 8);
        assertEquals(_expected.fixture, PeriodFormat.wordBased(FR).print(p));
    }

    private static Object INPUT1 = null;

	private static Object EXPECTED1 = "1 jour, 5 heures, 6 minutes, 7 secondes et 8 millisecondes";

	private static Object INPUT2 = null;

	private static Object EXPECTED2 = "1 jour, 5 heures, 6 minutes, 7 secondes et 8 millisecondes";

	private static Object INPUT3 = null;

	private static Object EXPECTED3 = "1 day, 5 hours, 6 minutes, 7 seconds and 8 milliseconds";

	private static Object INPUT4 = null;

	private static Object EXPECTED4 = "1 day, 5 hours, 6 minutes, 7 seconds and 8 milliseconds";

	private static Object INPUT5 = null;

	private static Object EXPECTED5 = "1 day, 5 hours, 6 minutes, 7 seconds and 8 milliseconds";

	private static Object INPUT6 = null;

	private static Object EXPECTED6 = "1 dzie\u0144, 5 godzin, 6 minut, 7 sekund i 8 milisekund";

	@DataPoints public static Fixture[] DATA={new Fixture(INPUT1,EXPECTED1),new Fixture(INPUT2,EXPECTED2),new Fixture(INPUT3,EXPECTED3),new Fixture(INPUT4,EXPECTED4),new Fixture(INPUT5,EXPECTED5),new Fixture(INPUT6,EXPECTED6)};

	public static class Fixture {
		private Object _input;
		private String _expected;

		public Fixture(Object _input, String _expected) {
			this._input = _input;
			this._expected = _expected;
		}
	}

}