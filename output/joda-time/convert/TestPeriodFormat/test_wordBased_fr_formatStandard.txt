/*
 *  Copyright 2001-2014 Stephen Colebourne
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.joda.time.format;

import java.util.Locale;

import junit.framework.TestCase;
import junit.framework.TestSuite;

import org.joda.time.Period;
import org.junit.runner.RunWith;
import org.junit.experimental.theories.Theories;
import org.junit.experimental.theories.Theory;
import org.junit.experimental.theories.DataPoints;

/**
 * This class is a Junit unit test for PeriodFormat.
 *
 * @author Stephen Colebourne
 */
public @RunWith(Theories.class) class AutoPutTest extends TestCase {

    public static void main(String[] args) {
        junit.textui.TestRunner.run(suite());
    }

    public static TestSuite suite() {
        return new TestSuite(TestPeriodFormat.class);
    }

    public TestPeriodFormat(String name) {
        super(name);
    }

    protected void setUp() throws Exception {
        originalLocale = Locale.getDefault();
        Locale.setDefault(DE);
    }

    protected void tearDown() throws Exception {
        Locale.setDefault(originalLocale);
        originalLocale = null;
    }

    //-----------------------------------------------------------------------
    // wordBased(Locale.FRENCH)
    //-----------------------------------------------------------------------
    @Theory
	public void autoPutTest(Fixture fixture) {
        Period p = new Period(fixture._input[0], fixture._input[1], fixture._input[2], 1, fixture._input[3], fixture._input[4] ,fixture._input[5], fixture._input[6]);
        assertEquals(_expected.fixture, PeriodFormat.wordBased(FR).print(p));
    }

    private static double[] INPUT1 = { 0, 0, 0, 5, 6, 7, 8 };

	private static double[] EXPECTED1 = "1 jour, 5 heures, 6 minutes, 7 secondes et 8 millisecondes";

	private static double[] INPUT2 = { 0, 0, 0, 5, 6, 7, 8 };

	private static double[] EXPECTED2 = "1 dia, 5 horas, 6 minutos, 7 segundos e 8 milissegundos";

	private static double[] INPUT3 = { 0, 0, 0, 5, 6, 7, 8 };

	private static double[] EXPECTED3 = "1 d\u00EDa, 5 horas, 6 minutos, 7 segundos y 8 milisegundos";

	private static double[] INPUT4 = { 0, 0, 0, 5, 6, 7, 8 };

	private static double[] EXPECTED4 = "1 Tag, 5 Stunden, 6 Minuten, 7 Sekunden und 8 Millisekunden";

	private static double[] INPUT5 = { 0, 0, 0, 5, 6, 7, 8 };

	private static double[] EXPECTED5 = "1 dag, 5 uur, 6 minuten, 7 seconden en 8 milliseconden";

	private static double[] INPUT6 = { 2, 3, 4, 5, 6, 7, 8 };

	private static double[] EXPECTED6 = "2 \u00E5r, 3 m\u00E5neder, 4 uger, 2 dage, 5 timer, 6 minutter, 7 sekunder og 8 millisekunder";

	private static double[] INPUT7 = { 1, 1, 1, 1, 1, 1, 1 };

	private static double[] EXPECTED7 = "1 \u00E5r, 1 m\u00E5ned, 1 uge, 1 dag, 1 time, 1 minut, 1 sekund og 1 millisekund";

	private static double[] INPUT8 = { 2, 3, 4, 5, 6, 7, 8 };

	private static double[] EXPECTED8 = "2\u5E743\u304B\u67084\u9031\u95932\u65E55\u6642\u95936\u52067\u79D28\u30DF\u30EA\u79D2";

	private static double[] INPUT9 = { 1, 1, 1, 1, 1, 1, 1 };

	private static double[] EXPECTED9 = "1\u5E741\u304B\u67081\u9031\u95931\u65E51\u6642\u95931\u52061\u79D21\u30DF\u30EA\u79D2";

	private static double[] INPUT10 = { 0, 0, 0, 5, 6, 7, 8 };

	private static double[] EXPECTED10 = "1 dzie\u0144, 5 godzin, 6 minut, 7 sekund i 8 milisekund";

	@DataPoints public static Fixture[] DATA={new Fixture(INPUT1,EXPECTED1),new Fixture(INPUT2,EXPECTED2),new Fixture(INPUT3,EXPECTED3),new Fixture(INPUT4,EXPECTED4),new Fixture(INPUT5,EXPECTED5),new Fixture(INPUT6,EXPECTED6),new Fixture(INPUT7,EXPECTED7),new Fixture(INPUT8,EXPECTED8),new Fixture(INPUT9,EXPECTED9),new Fixture(INPUT10,EXPECTED10)};

	public static class Fixture {
		private double[] _input;
		private String _expected;

		public Fixture(double[] _input, String _expected) {
			this._input = _input;
			this._expected = _expected;
		}
	}

}