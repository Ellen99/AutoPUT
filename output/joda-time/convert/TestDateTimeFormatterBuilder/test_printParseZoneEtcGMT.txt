/*
 *  Copyright 2001-2011 Stephen Colebourne
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.joda.time.format;

import java.io.IOException;
import java.io.StringWriter;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;

import junit.framework.AssertionFailedError;
import junit.framework.TestCase;
import junit.framework.TestSuite;

import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDateTime;
import org.junit.runner.RunWith;
import org.junit.experimental.theories.Theories;
import org.junit.experimental.theories.Theory;
import org.junit.experimental.theories.DataPoints;

/**
 * This class is a Junit unit test for DateTimeFormatterBuilder.
 *
 * @author Stephen Colebourne
 * @author Brian S O'Neill
 */
public @RunWith(Theories.class) class AutoPutTest extends TestCase {

    public static void main(String[] args) {
        junit.textui.TestRunner.run(suite());
    }

    public static TestSuite suite() {
        return new TestSuite(TestDateTimeFormatterBuilder.class);
    }

    public TestDateTimeFormatterBuilder(String name) {
        super(name);
    }

    protected void setUp() throws Exception {
    }

    protected void tearDown() throws Exception {
    }

    @Theory
	public void autoPutTest(Fixture fixture) {
        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
                .appendPattern("yyyy-MM-dd HH:mm ZZZ");
        DateTimeFormatter f = bld.toFormatter();

        DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forID(fixture._expected[0]));
        assertEquals(fixture._expected[1], f.print(dt));
        assertEquals(dt, f.parseDateTime(_input.fixture));
    }

    private static void assertPrint(String expected, DateTimeFormatter f, DateTime dt) {
        assertEquals(expected, f.print(dt));
        StringWriter out = new StringWriter();
        try {
            f.printTo(out, dt);
        } catch (IOException ex) {
            AssertionFailedError failure = new AssertionFailedError();
            failure.initCause(ex);
            throw failure;
        }
        assertEquals(expected, out.toString());
    }

	private static String INPUT1 = "2007-03-04 12:30 Etc/GMT";

	private static String EXPECTED1 = { "Etc/GMT", "2007-03-04 12:30 Etc/GMT" };

	private static String INPUT2 = "2007-03-04 12:30 GMT";

	private static String EXPECTED2 = { "GMT", "2007-03-04 12:30 Etc/GMT" };

	private static String INPUT3 = "2007-03-04 12:30 Etc/GMT+1";

	private static String EXPECTED3 = { "Etc/GMT+1", "2007-03-04 12:30 Etc/GMT+1" };

	private static String INPUT4 = "2007-03-04 12:30 Etc/GMT+10";

	private static String EXPECTED4 = { "Etc/GMT+10", "2007-03-04 12:30 Etc/GMT+10" };

	private static String INPUT5 = "2007-03-04 12:30 MET";

	private static String EXPECTED5 = { "MET", "2007-03-04 12:30 MET" };

	@DataPoints public static Fixture[] DATA={new Fixture(INPUT1,EXPECTED1),new Fixture(INPUT2,EXPECTED2),new Fixture(INPUT3,EXPECTED3),new Fixture(INPUT4,EXPECTED4),new Fixture(INPUT5,EXPECTED5)};

	public static class Fixture {
		private String _input;
		private String[] _expected;

		public Fixture(String _input, String[] _expected) {
			this._input = _input;
			this._expected = _expected;
		}
	}

}