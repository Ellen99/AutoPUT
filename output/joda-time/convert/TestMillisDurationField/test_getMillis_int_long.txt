/*
 *  Copyright 2001-2009 Stephen Colebourne
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.joda.time.field;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import junit.framework.TestCase;
import junit.framework.TestSuite;

import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.chrono.ISOChronology;
import org.junit.runner.RunWith;
import org.junit.experimental.theories.Theories;
import org.junit.experimental.theories.Theory;
import org.junit.experimental.theories.DataPoints;

/**
 * This class is a Junit unit test for PeriodFormatterBuilder.
 *
 * @author Stephen Colebourne
 */
public @RunWith(Theories.class) class AutoPutTest extends TestCase {

    public static void main(String[] args) {
        junit.textui.TestRunner.run(suite());
    }

    public static TestSuite suite() {
        return new TestSuite(TestMillisDurationField.class);
    }

    public TestMillisDurationField(String name) {
        super(name);
    }

    protected void setUp() throws Exception {
    }

    protected void tearDown() throws Exception {
    }

    @Theory
	public void autoPutTest(Fixture fixture) {
        assertEquals(fixture._expected[0], MillisDurationField.INSTANCE.getMillis(fixture._input[0], 567L));
        assertEquals(fixture._expected[1], MillisDurationField.INSTANCE.getMillis(fixture._input[1], 567L));
        assertEquals(fixture._input[2], MillisDurationField.INSTANCE.getMillis(fixture._input[3], 567L));
    }

    private static double[] INPUT1 = { 0, 1234, -1234, -1234 };

	private static double[] EXPECTED1 = { 0, 1234 };

	private static double[] INPUT2 = { 0L, 1234L, -1234L, -1234L };

	private static double[] EXPECTED2 = { 0L, 1234L };

	@DataPoints public static Fixture[] DATA={new Fixture(INPUT1,EXPECTED1),new Fixture(INPUT2,EXPECTED2)};

	public static class Fixture {
		private double[] _input;
		private double[] _expected;

		public Fixture(double[] _input, double[] _expected) {
			this._input = _input;
			this._expected = _expected;
		}
	}

}