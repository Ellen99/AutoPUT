/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.commons.codec.language;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.apache.commons.codec.StringEncoderAbstractTest;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.experimental.theories.Theories;
import org.junit.experimental.theories.Theory;
import org.junit.experimental.theories.DataPoints;

/**
 * Series of tests for the Match Rating Approach algorithm.
 *
 * General naming nomenclature for the test is of the form:
 * GeneralMetadataOnTheTestArea_ActualTestValues_ExpectedResult
 *
 * An unusual value is indicated by the term "corner case"
 */
public @RunWith(Theories.class) class AutoPutTest extends StringEncoderAbstractTest<MatchRatingApproachEncoder> {

    // ********** BEGIN REGION - TEST SUPPORT METHODS

    @Theory
	public final void autoPutTest(Fixture fixture) {
        assertEquals(fixture._expected, this.getStringEncoder().removeAccents(fixture._input));
    }

    

    // ***** END REGION - TEST SUPPORT METHODS

    // ***** BEGIN REGION - TEST GET MRA ENCODING

    

    // ***** END REGION - TEST GET MRA ENCODING

    // ***** BEGIN REGION - TEST GET MRA COMPARISONS

    

    // ***** Begin Region - Test Get Encoding - Surnames

    

    // **** BEGIN YIDDISH/SLAVIC SECTION ****

    

    // **** END YIDDISH/SLAVIC SECTION ****

    @Override
    protected MatchRatingApproachEncoder createStringEncoder() {
        return new MatchRatingApproachEncoder();
    }

	private static String INPUT1 = "áéíóú";

	private static String EXPECTED1 = "aeiou";

	private static String INPUT2 = "áé íó  ú";

	private static String EXPECTED2 = "ae io  u";

	private static String INPUT3 = "ÁeíÓuu";

	private static String EXPECTED3 = "AeiOuu";

	private static String INPUT4 = "Á-e'í.,ó&ú";

	private static String EXPECTED4 = "A-e'i.,o&u";

	private static String INPUT5 = "äëöüßÄËÖÜñÑà";

	private static String EXPECTED5 = "aeoußAEOUnNa";

	private static String INPUT6 = "È,É,Ê,Ë,Û,Ù,Ï,Î,À,Â,Ô,è,é,ê,ë,û,ù,ï,î,à,â,ô,ç";

	private static String EXPECTED6 = "E,E,E,E,U,U,I,I,A,A,O,e,e,e,e,u,u,i,i,a,a,o,c";

	private static String INPUT7 = "Colorless green ideas sleep furiously";

	private static String EXPECTED7 = "Colorless green ideas sleep furiously";

	private static String INPUT8 = "";

	private static String EXPECTED8 = "";

	@DataPoints public static Fixture[] DATA={new Fixture(INPUT1,EXPECTED1),new Fixture(INPUT2,EXPECTED2),new Fixture(INPUT3,EXPECTED3),new Fixture(INPUT4,EXPECTED4),new Fixture(INPUT5,EXPECTED5),new Fixture(INPUT6,EXPECTED6),new Fixture(INPUT7,EXPECTED7),new Fixture(INPUT8,EXPECTED8)};

	public static class Fixture {
		private String _input;
		private String _expected;

		public Fixture(String _input, String _expected) {
			this._input = _input;
			this._expected = _expected;
		}
	}

    // ***** END REGION - TEST GET MRA COMPARISONS

}