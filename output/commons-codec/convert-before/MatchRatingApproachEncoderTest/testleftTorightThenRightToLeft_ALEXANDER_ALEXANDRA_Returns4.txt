/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.commons.codec.language;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.apache.commons.codec.StringEncoderAbstractTest;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameters;

/**
 * Series of tests for the Match Rating Approach algorithm.
 *
 * General naming nomenclature for the test is of the form:
 * GeneralMetadataOnTheTestArea_ActualTestValues_ExpectedResult
 *
 * An unusual value is indicated by the term "corner case"
 */
public @RunWith(Parameterized.class) class MatchRatingApproachEncoderTest extends StringEncoderAbstractTest<MatchRatingApproachEncoder> {

    // ********** BEGIN REGION - TEST SUPPORT METHODS

    @Test
    public final void testleftTorightThenRightToLeft_ALEXANDER_ALEXANDRA_Returns4() {
        assertEquals(_expected, this.getStringEncoder().leftToRightThenRightToLeftProcessing(_input[0], _input[1]));
    }

    

    // ***** END REGION - TEST SUPPORT METHODS

    // ***** BEGIN REGION - TEST GET MRA ENCODING

    

    // ***** END REGION - TEST GET MRA ENCODING

    // ***** BEGIN REGION - TEST GET MRA COMPARISONS

    

    // ***** Begin Region - Test Get Encoding - Surnames

    

    // **** BEGIN YIDDISH/SLAVIC SECTION ****

    

    // **** END YIDDISH/SLAVIC SECTION ****

    @Override
    protected MatchRatingApproachEncoder createStringEncoder() {
        return new MatchRatingApproachEncoder();
    }

	@Parameters public static Collection<Object[]> data(){return Arrays.asList(new Object[][]{{{"ALEXANDER","ALEXANDRA"},4},{{"EINSTEIN","MICHAELA"},0}});}

	private String[] _input;
	private double _expected;

	public AutoPUT(String[] _input, double _expected) {
		this._input = _input;
		this._expected = _expected;
	}

    // ***** END REGION - TEST GET MRA COMPARISONS

}