/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.commons.codec.language;

import static org.junit.Assert.assertEquals;

import org.apache.commons.codec.StringEncoderAbstractTest;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameters;

/**
 * Tests {@link DoubleMetaphone}.
 * <p>
 * The test data was extracted from Stephen Woodbridge's <a
 * href="http://swoodbridge.com/DoubleMetaPhone/surnames.txt">PHP test program</a>.
 *
 * @see <a href="http://swoodbridge.com/DoubleMetaPhone/surnames.txt">PHP test program</a>
 * @version $Id$
 */
public @RunWith(Parameterized.class) class DoubleMetaphone2Test extends StringEncoderAbstractTest<DoubleMetaphone> {

    private void checkDoubleMetaphone(final int typeIndex, final boolean alternate) {
        for (int i = 0; i < TEST_DATA.length; i++) {
            final String value = TEST_DATA[i][0];
            assertEquals("Test [" + i + "]=" + value, TEST_DATA[i][typeIndex], this.getStringEncoder().doubleMetaphone(value, alternate));
        }
    }

    @Override
    protected DoubleMetaphone createStringEncoder() {
        return new DoubleMetaphone();
    }

    /**
     * Test alternative encoding.
     */
    @Test
    public void testDoubleMetaphoneAlternate() {
        this.checkDoubleMetaphone(ALTERNATE_INDEX, _input);
    }

    @Parameters public static Collection<Object[]> data(){return Arrays.asList(new Object[][]{{true,{}},{false,{}}});}

	private boolean _input;

	private Object _expected;

	public AutoPUT(boolean _input, Object _expected) {
		this._input = _input;
		this._expected = _expected;
	}
}