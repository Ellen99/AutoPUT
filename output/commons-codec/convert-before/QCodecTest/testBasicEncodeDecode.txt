/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package org.apache.commons.codec.net;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.nio.charset.UnsupportedCharsetException;

import org.apache.commons.codec.CharEncoding;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.EncoderException;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameters;

/**
 * Quoted-printable codec test cases
 *
 * @version $Id$
 */
public @RunWith(Parameterized.class) class QCodecTest {

    private String constructString(final int [] unicodeChars) {
        final StringBuilder buffer = new StringBuilder();
        if (unicodeChars != null) {
            for (final int unicodeChar : unicodeChars) {
                buffer.append((char)unicodeChar);
            }
        }
        return buffer.toString();
    }

    @Test
    public void testBasicEncodeDecode() throws Exception {
        final QCodec qcodec = new QCodec();
        final String plain = _expected[0];
        final String encoded = qcodec.encode(plain);
        assertEquals(_input[0],
            _expected[1], encoded);
        assertEquals(_input[1],
            plain, qcodec.decode(encoded));
    }

    private static String[] INPUT1 = { "Basic Q encoding test", "Basic Q decoding test" };


	private static String[] EXPECTED1 = { "= Hello there =\r\n", "=?UTF-8?Q?=3D Hello there =3D=0D=0A?=" };


	private static String[] INPUT2 = { "Unsafe chars Q encoding test", "Unsafe chars Q decoding test" };


	private static String[] EXPECTED2 = { "?_=\r\n", "=?UTF-8?Q?=3F=5F=3D=0D=0A?=" };


	@DataPoints public static AutoPutTest[] DATA={new AutoPutTest(INPUT1,EXPECTED1),new AutoPutTest(INPUT2,EXPECTED2)};


	private String[] _input;

	private String[] _expected;

	public AutoPutTest(String[] _input, String[] _expected) {
		this._input = _input;
		this._expected = _expected;
	}

}