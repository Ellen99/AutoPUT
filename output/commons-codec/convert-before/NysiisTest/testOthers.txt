/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.commons.codec.language;

import org.apache.commons.codec.EncoderException;
import org.apache.commons.codec.StringEncoderAbstractTest;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameters;

/**
 * Tests {@link Nysiis}
 *
 * @since 1.7
 * @version $Id$
 */
public @RunWith(Parameterized.class) class NysiisTest extends StringEncoderAbstractTest<Nysiis> {

    /**
     * Takes an array of String pairs where each pair's first element is the input and the second element the expected
     * encoding.
     *
     * @param testValues
     *            an array of String pairs where each pair's first element is the input and the second element the
     *            expected encoding.
     * @throws EncoderException
     */
    private void assertEncodings(final String[]... testValues) throws EncoderException {
        for (final String[] arr : testValues) {
            Assert.assertEquals("Problem with " + arr[0], arr[1], this.fullNysiis.encode(arr[0]));
        }
    }

    @Override
    protected Nysiis createStringEncoder() {
        return new Nysiis();
    }

    private void encodeAll(final String[] strings, final String expectedEncoding) {
        for (final String string : strings) {
            Assert.assertEquals("Problem with " + string, expectedEncoding, getStringEncoder().encode(string));
        }
    }

    /**
     * Tests data gathered from around the internets.
     *
     * @throws EncoderException
     */
    @Test
    public void testOthers() throws EncoderException {
        this.assertEncodings(
                new String[] { _input[0], _input[1] },
                new String[] { _input[2], _input[3] },
                new String[] { _input[4], _input[5] },
                new String[] { _input[6], _input[7] },
                new String[] { _input[8], _input[9] },
                //
                new String[] { _input[10], _input[11] });
    }

    @Parameters public static Collection<Object[]> data(){return Arrays.asList(new Object[][]{{{"O'Daniel","ODANAL","O'Donnel","ODANAL","Cory","CARY","Corey","CARY","Kory","CARY","FUZZY","FASY"},{}},{{"MACX","MCX","KNX","NX","KX","CX","PHX","FX","PFX","FX","SCHX","SX"},{}},{{"XEV","XAF","XAX","XAX","XEX","XAX","XIX","XAX","XOX","XAX","XUX","XAX"},{}}});}

	private String[] _input;
	private Object _expected;

	public AutoPUT(String[] _input, Object _expected) {
		this._input = _input;
		this._expected = _expected;
	}

}