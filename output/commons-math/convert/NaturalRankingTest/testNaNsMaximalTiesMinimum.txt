/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.commons.math4.stat.ranking;

import org.junit.Assert;
import org.apache.commons.math4.TestUtils;
import org.apache.commons.math4.exception.NotANumberException;
import org.apache.commons.math4.stat.ranking.NaNStrategy;
import org.apache.commons.math4.stat.ranking.NaturalRanking;
import org.apache.commons.math4.stat.ranking.TiesStrategy;
import org.junit.Test;
import org.junit.Ignore;
import org.apache.commons.rng.UniformRandomProvider;
import org.apache.commons.rng.simple.RandomSource;
import org.junit.runner.RunWith;
import org.junit.experimental.theories.Theories;
import org.junit.experimental.theories.Theory;
import org.junit.experimental.theories.DataPoints;


/**
 * Test cases for NaturalRanking class
 *
 * @since 2.0
 */
public @RunWith(Theories.class) class AutoPutTest {

    @Theory
	public void autoPutTest(Fixture fixture) {
        NaturalRanking ranking = new NaturalRanking(fixture._input[0], fixture._input[1]);
        double[] ranks = ranking.rank(exampleData);
        double[] correctRanks = { fixture._input[2], fixture._input[3], fixture._input[4], fixture._input[5], fixture._input[6], fixture._input[7], fixture._input[8], fixture._input[9], fixture._input[10] };
        TestUtils.assertEquals(correctRanks, ranks, 0d);
        ranks = ranking.rank(tiesFirst);
        correctRanks = new double[] { fixture._input[11], fixture._input[12], 4, 3, 5 };
        TestUtils.assertEquals(correctRanks, ranks, 0d);
        ranks = ranking.rank(tiesLast);
        correctRanks = new double[] { fixture._input[13], fixture._input[14], 2, 1 };
        TestUtils.assertEquals(correctRanks, ranks, 0d);
        ranks = ranking.rank(multipleNaNs);
        correctRanks = new double[] { fixture._input[15], fixture._input[16], fixture._input[17], fixture._input[18] };
        TestUtils.assertEquals(correctRanks, ranks, 0d);
        ranks = ranking.rank(multipleTies);
        correctRanks = new double[] { 3, 2, fixture._input[19], fixture._input[20], fixture._input[21], fixture._input[22], 1 };
        TestUtils.assertEquals(correctRanks, ranks, 0d);
        ranks = ranking.rank(allSame);
        correctRanks = new double[] { fixture._input[23], fixture._input[24], fixture._input[25], fixture._input[26] };
        TestUtils.assertEquals(correctRanks, ranks, 0d);
    }

    private static Object[] INPUT1 = { NaNStrategy.MAXIMAL, TiesStrategy.MINIMUM, 5, 2, 6, 7, 2, 8, 9, 1, 2, 1, 1, 3, 3,
			1, 2, 3, 3, 4, 4, 6, 6, 1, 1, 1, 1 };

	private static Object[] EXPECTED1 = null;

	private static Object[] INPUT2 = { NaNStrategy.MINIMAL, TiesStrategy.MAXIMUM, 6, 5, 7, 8, 5, 9, 2, 2, 5, 2, 2, 4, 4,
			3, 4, 2, 2, 5, 5, 7, 7, 4, 4, 4, 4 };

	private static Object[] EXPECTED2 = null;

	@DataPoints public static Fixture[] DATA={new Fixture(INPUT1,EXPECTED1),new Fixture(INPUT2,EXPECTED2)};

	public static class Fixture {
		private Object[] _input;
		private Object _expected;

		public Fixture(Object[] _input, Object _expected) {
			this._input = _input;
			this._expected = _expected;
		}
	}

}