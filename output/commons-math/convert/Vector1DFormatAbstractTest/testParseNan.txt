/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.commons.math4.geometry.euclidean.oned;

import java.text.NumberFormat;
import java.text.ParsePosition;
import java.util.Locale;

import org.apache.commons.math4.exception.MathParseException;
import org.apache.commons.math4.geometry.euclidean.oned.Vector1DFormat;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.experimental.theories.Theories;
import org.junit.experimental.theories.Theory;
import org.junit.experimental.theories.DataPoints;

public abstract @RunWith(Theories.class) class AutoPutTest {

    Vector1DFormat vector1DFormat = null;
    Vector1DFormat vector1DFormatSquare = null;

    protected abstract Locale getLocale();

    protected abstract char getDecimalCharacter();

    protected AutoPutTest() {
        vector1DFormat = Vector1DFormat.getInstance(getLocale());
        final NumberFormat nf = NumberFormat.getInstance(getLocale());
        nf.setMaximumFractionDigits(2);
        vector1DFormatSquare = new Vector1DFormat("[", "]", nf);
    }

    @Theory
	public void autoPutTest(Fixture fixture) throws MathParseException {
        String source = (String) fixture._input[0];
        Vector1D actual = vector1DFormat.parse(source);
        Assert.assertEquals((Cartesian1D) fixture._input[1], actual);
    }

    private static Object[] INPUT1 = { "{(NaN)}", Cartesian1D.NaN };

	private static Object EXPECTED1 = null;

	private static Object[] INPUT2 = { "{(Infinity)}", Cartesian1D.POSITIVE_INFINITY };

	private static Object EXPECTED2 = null;

	private static Object[] INPUT3 = { "{(-Infinity)}", Cartesian1D.NEGATIVE_INFINITY };

	private static Object EXPECTED3 = null;

	@DataPoints public static Fixture[] DATA={new Fixture(INPUT1,EXPECTED1),new Fixture(INPUT2,EXPECTED2),new Fixture(INPUT3,EXPECTED3)};

	public static class Fixture {
		private Object[] _input;
		private Object _expected;

		public Fixture(Object[] _input, Object _expected) {
			this._input = _input;
			this._expected = _expected;
		}
	}

}