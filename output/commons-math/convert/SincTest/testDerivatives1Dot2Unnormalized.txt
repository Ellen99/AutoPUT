/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.commons.math4.analysis.function;

import org.apache.commons.math4.analysis.UnivariateFunction;
import org.apache.commons.math4.analysis.differentiation.DerivativeStructure;
import org.apache.commons.math4.dfp.Dfp;
import org.apache.commons.math4.dfp.DfpField;
import org.apache.commons.math4.dfp.DfpMath;
import org.apache.commons.math4.util.FastMath;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.experimental.theories.Theories;
import org.junit.experimental.theories.Theory;
import org.junit.experimental.theories.DataPoints;

public @RunWith(Theories.class) class AutoPutTest {

   @Theory
public void autoPutTest(Fixture fixture) {
       DerivativeStructure s = new Sinc(new Boolean(fixture._input[0].toString())).value(new DerivativeStructure(1, 5, 0, 1.2));
       Assert.assertEquals( new Double(fixture._input[1].toString()), s.getPartialDerivative(0), new Double(fixture._input[2].toString()));
       Assert.assertEquals(new Double(fixture._input[3].toString()), s.getPartialDerivative(1), new Double(fixture._input[4].toString()));
       Assert.assertEquals(new Double(fixture._input[5].toString()),  s.getPartialDerivative(2), new Double(fixture._input[6].toString()));
       Assert.assertEquals( new Double(fixture._input[7].toString()),  s.getPartialDerivative(3), new Double(fixture._input[8].toString()));
       Assert.assertEquals( new Double(fixture._input[9].toString()),   s.getPartialDerivative(4), new Double(fixture._input[10].toString()));
       Assert.assertEquals(new Double(fixture._input[11].toString()),  s.getPartialDerivative(5), new Double(fixture._input[12].toString()));
   }

   private static Object[] INPUT1 = { false, 0.77669923830602195806, 1.0e-16, -0.34528456985779031701, 1.0e-16,
		-0.2012249552097047631, 1.0e-16, 0.2010975926270339262, 4.0e-16, 0.106373929549242204, 1.0e-15,
		-0.1412599110579478695, 3.0e-15 };

private static Object EXPECTED1 = null;

private static Object[] INPUT2 = { true, -0.15591488063143983888, 6.0e-17, -0.54425176145292298767, 2.0e-16,
		2.4459044611635856107, 9.0e-16, 0.5391369206235909586, 7.0e-16, -16.984649869728849865, 8.0e-15,
		5.0980327462666316586, 9.0e-15 };

private static Object EXPECTED2 = null;

@DataPoints public static Fixture[] DATA={new Fixture(INPUT1,EXPECTED1),new Fixture(INPUT2,EXPECTED2)};

public static class Fixture {
	private Object[] _input;
	private Object _expected;

	public Fixture(Object[] _input, Object _expected) {
		this._input = _input;
		this._expected = _expected;
	}
}
}