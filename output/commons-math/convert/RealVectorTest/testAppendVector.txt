/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.commons.math4.linear;

import java.util.Iterator;

import org.apache.commons.math4.linear.RealVector;
import org.apache.commons.math4.linear.RealVector.Entry;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.experimental.theories.Theories;
import org.junit.experimental.theories.Theory;
import org.junit.experimental.theories.DataPoints;

/**
 * Tests for {@link RealVector}.
 */
public @RunWith(Theories.class) class AutoPutTest extends RealVectorAbstractTest{

    @Override
    public RealVector create(final double[] data) {
        return new RealVectorTestImpl(data);
    }

    @Theory
	@Ignore(fixture._input)
    @Override
    public void autoPutTest(Fixture fixture) {
        // Do nothing
    }

    private static String INPUT1 = "Abstract class RealVector does not implement append(RealVector).";

	private static Object EXPECTED1 = null;

	private static String INPUT2 = "Abstract class RealVector does not implement append(double)";

	private static Object EXPECTED2 = null;

	private static String INPUT3 = "Abstract class RealVector does not implement getSubvector(int, int)";

	private static Object EXPECTED3 = null;

	private static String INPUT4 = "Abstract class RealVector does not implement getSubvector(int, int)";

	private static Object EXPECTED4 = null;

	private static String INPUT5 = "Abstract class RealVector does not implement getSubvector(int, int)";

	private static Object EXPECTED5 = null;

	private static String INPUT6 = "Abstract class RealVector does not implement getSubvector(int, int)";

	private static Object EXPECTED6 = null;

	private static String INPUT7 = "Abstract class RealVector does not implement getSubvector(int, int)";

	private static Object EXPECTED7 = null;

	private static String INPUT8 = "Abstract class RealVector does not implement setSubvector(int, RealVector)";

	private static Object EXPECTED8 = null;

	private static String INPUT9 = "Abstract class RealVector does not implement setSubvector(int, RealVector)";

	private static Object EXPECTED9 = null;

	private static String INPUT10 = "Abstract class RealVector does not implement setSubvector(int, RealVector)";

	private static Object EXPECTED10 = null;

	private static String INPUT11 = "Abstract class RealVector does not implement setSubvector(int, RealVector)";

	private static Object EXPECTED11 = null;

	private static String INPUT12 = "Abstract class RealVector does not implement setSubvector(int, RealVector)";

	private static Object EXPECTED12 = null;

	private static String INPUT13 = "Abstract class RealVector does not implement isNaN()";

	private static Object EXPECTED13 = null;

	private static String INPUT14 = "Abstract class RealVector does not implement isNaN()";

	private static Object EXPECTED14 = null;

	private static String INPUT15 = "Abstract class RealVector does not implement ebeMultiply(RealVector)";

	private static Object EXPECTED15 = null;

	private static String INPUT16 = "Abstract class RealVector does not implement ebeMultiply(RealVector)";

	private static Object EXPECTED16 = null;

	private static String INPUT17 = "Abstract class RealVector does not implement ebeMultiply(RealVector)";

	private static Object EXPECTED17 = null;

	private static String INPUT18 = "Abstract class RealVector does not implement ebeDivide(RealVector)";

	private static Object EXPECTED18 = null;

	private static String INPUT19 = "Abstract class RealVector does not implement ebeDivide(RealVector)";

	private static Object EXPECTED19 = null;

	private static String INPUT20 = "Abstract class RealVector does not implement ebeDivide(RealVector)";

	private static Object EXPECTED20 = null;

	private static String INPUT21 = "Abstract class RealVector does not implement getL1Norm()";

	private static Object EXPECTED21 = null;

	private static String INPUT22 = "Abstract class RealVector does not implement getLInfNorm()";

	private static Object EXPECTED22 = null;

	private static String INPUT23 = "Abstract class RealVector is not serializable.";

	private static Object EXPECTED23 = null;

	private static String INPUT24 = "Abstract class RealVector does not override equals(Object).";

	private static Object EXPECTED24 = null;

	@DataPoints public static Fixture[] DATA={new Fixture(INPUT1,EXPECTED1),new Fixture(INPUT2,EXPECTED2),new Fixture(INPUT3,EXPECTED3),new Fixture(INPUT4,EXPECTED4),new Fixture(INPUT5,EXPECTED5),new Fixture(INPUT6,EXPECTED6),new Fixture(INPUT7,EXPECTED7),new Fixture(INPUT8,EXPECTED8),new Fixture(INPUT9,EXPECTED9),new Fixture(INPUT10,EXPECTED10),new Fixture(INPUT11,EXPECTED11),new Fixture(INPUT12,EXPECTED12),new Fixture(INPUT13,EXPECTED13),new Fixture(INPUT14,EXPECTED14),new Fixture(INPUT15,EXPECTED15),new Fixture(INPUT16,EXPECTED16),new Fixture(INPUT17,EXPECTED17),new Fixture(INPUT18,EXPECTED18),new Fixture(INPUT19,EXPECTED19),new Fixture(INPUT20,EXPECTED20),new Fixture(INPUT21,EXPECTED21),new Fixture(INPUT22,EXPECTED22),new Fixture(INPUT23,EXPECTED23),new Fixture(INPUT24,EXPECTED24)};

	public static class Fixture {
		private String _input;
		private Object _expected;

		public Fixture(String _input, Object _expected) {
			this._input = _input;
			this._expected = _expected;
		}
	}
}