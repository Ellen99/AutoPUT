/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.commons.math4.geometry.euclidean.threed;

import org.apache.commons.numbers.angle.PlaneAngleRadians;
import org.apache.commons.math4.exception.MathArithmeticException;
import org.apache.commons.math4.exception.MathIllegalArgumentException;
import org.apache.commons.math4.geometry.euclidean.threed.CardanEulerSingularityException;
import org.apache.commons.math4.geometry.euclidean.threed.NotARotationMatrixException;
import org.apache.commons.math4.geometry.euclidean.threed.Rotation;
import org.apache.commons.math4.geometry.euclidean.threed.RotationOrder;
import org.apache.commons.math4.geometry.euclidean.threed.Cartesian3D;
import org.apache.commons.math4.util.FastMath;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.experimental.theories.Theories;
import org.junit.experimental.theories.Theory;
import org.junit.experimental.theories.DataPoints;


public @RunWith(Theories.class) class AutoPutTest {

  @Theory
public void autoPutTest(Fixture fixture) {
    Rotation r = new Rotation(0.001, 0.36, 0.48, 0.8, true);
    Rotation reverted = r.revert();
    checkRotation(r.compose(reverted, fixture._input[0]), 1, 0, 0, 0);
    checkRotation(reverted.compose(r, fixture._input[1]), 1, 0, 0, 0);
    Assert.assertEquals(r.getAngle(), reverted.getAngle(), 1.0e-12);
    Assert.assertEquals(-1,
                        Cartesian3D.dotProduct(r.getAxis(fixture._input[2]),
                                           reverted.getAxis(fixture._input[3])),
                        1.0e-12);
  }

  private void checkVector(Cartesian3D v1, Cartesian3D v2) {
    Assert.assertTrue(v1.subtract(v2).getNorm() < 1.0e-10);
  }

  private void checkAngle(double a1, double a2) {
    Assert.assertEquals(a1, PlaneAngleRadians.normalize(a2, a1), 1.0e-10);
  }

  private void checkRotation(Rotation r, double q0, double q1, double q2, double q3) {
    Assert.assertEquals(0, Rotation.distance(r, new Rotation(q0, q1, q2, q3, false)), 1.0e-12);
  }

private static Object[] INPUT1 = { RotationConvention.VECTOR_OPERATOR, RotationConvention.VECTOR_OPERATOR,
		RotationConvention.VECTOR_OPERATOR, RotationConvention.VECTOR_OPERATOR };

private static Object[] EXPECTED1 = null;

private static Object[] INPUT2 = { RotationConvention.FRAME_TRANSFORM, RotationConvention.FRAME_TRANSFORM,
		RotationConvention.FRAME_TRANSFORM, RotationConvention.FRAME_TRANSFORM };

private static Object[] EXPECTED2 = null;

@DataPoints public static Fixture[] DATA={new Fixture(INPUT1,EXPECTED1),new Fixture(INPUT2,EXPECTED2)};

public static class Fixture {
	private Object[] _input;
	private Object _expected;

	public Fixture(Object[] _input, Object _expected) {
		this._input = _input;
		this._expected = _expected;
	}
}

}