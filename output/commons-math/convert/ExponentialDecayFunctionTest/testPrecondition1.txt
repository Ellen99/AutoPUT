/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.commons.math4.ml.neuralnet.sofm.util;

import org.apache.commons.math4.exception.NotStrictlyPositiveException;
import org.apache.commons.math4.exception.NumberIsTooLargeException;
import org.apache.commons.math4.ml.neuralnet.sofm.util.ExponentialDecayFunction;
import org.junit.Test;
import org.junit.Assert;
import org.junit.runner.RunWith;
import org.junit.experimental.theories.Theories;
import org.junit.experimental.theories.Theory;
import org.junit.experimental.theories.DataPoints;

/**
 * Tests for {@link ExponentialDecayFunction} class
 */
public @RunWith(Theories.class) class AutoPutTest {
    @Theory
	public void autoPutTest(Fixture fixture) {
        new ExponentialDecayFunction(fixture._input[0], fixture._input[1], fixture._input[2]);
    }
    private static double[] INPUT1 = { 0d, 0d, 2 };

	private static double[] EXPECTED1 = null;

	private static double[] INPUT2 = { 1d, 0d, 2 };

	private static double[] EXPECTED2 = null;

	private static double[] INPUT3 = { 1d, 0.2, 0 };

	private static double[] EXPECTED3 = null;

	@DataPoints public static Fixture[] DATA={new Fixture(INPUT1,EXPECTED1),new Fixture(INPUT2,EXPECTED2),new Fixture(INPUT3,EXPECTED3)};

	public static class Fixture {
		private double[] _input;
		private Object _expected;

		public Fixture(double[] _input, Object _expected) {
			this._input = _input;
			this._expected = _expected;
		}
	}
}