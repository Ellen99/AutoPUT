/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.commons.math4.complex;

import java.text.FieldPosition;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.util.Arrays;
import java.util.Locale;

import org.apache.commons.math4.exception.MathIllegalArgumentException;
import org.apache.commons.math4.exception.NoDataException;
import org.apache.commons.math4.exception.NullArgumentException;
import org.junit.Test;
import org.junit.Assert;
import org.apache.commons.math4.complex.Complex;
import org.apache.commons.math4.complex.ComplexFormat;
import org.apache.commons.math4.util.FastMath;
import org.junit.runner.RunWith;
import org.junit.experimental.theories.Theories;
import org.junit.experimental.theories.Theory;
import org.junit.experimental.theories.DataPoints;

public abstract @RunWith(Theories.class) class AutoPutTest {

    protected abstract Locale getLocale();

    protected abstract char getDecimalCharacter();

    protected ComplexFormatAbstractTest() {
        complexFormat = ComplexFormat.getInstance(getLocale());
        complexFormatJ = ComplexFormat.getInstance("j", getLocale());
    }

    @Theory
	public void autoPutTest(Fixture fixture) {
        Complex c = new Complex(fixture._input[0], fixture._input[1]);
        String expected = fixture._expected[0] + getDecimalCharacter() + fixture._expected[1] + getDecimalCharacter() + fixture._expected[2];
        String actual = complexFormat.format(c);
        Assert.assertEquals(expected, actual);
    }

    private static double[] INPUT1 = { 1.23, 1.43 };

	private static double[] EXPECTED1 = { "1", "23 + 1", "43i" };

	private static double[] INPUT2 = { 1.232323232323, 1.434343434343 };

	private static double[] EXPECTED2 = { "1", "2323232323 + 1", "4343434343i" };

	private static double[] INPUT3 = { -1.232323232323, 1.43 };

	private static double[] EXPECTED3 = { "-1", "2323232323 + 1", "43i" };

	private static double[] INPUT4 = { 1.23, -1.434343434343 };

	private static double[] EXPECTED4 = { "1", "23 - 1", "4343434343i" };

	private static double[] INPUT5 = { -1.232323232323, -1.434343434343 };

	private static double[] EXPECTED5 = { "-1", "2323232323 - 1", "4343434343i" };

	@DataPoints public static Fixture[] DATA={new Fixture(INPUT1,EXPECTED1),new Fixture(INPUT2,EXPECTED2),new Fixture(INPUT3,EXPECTED3),new Fixture(INPUT4,EXPECTED4),new Fixture(INPUT5,EXPECTED5)};

	public static class Fixture {
		private double[] _input;
		private String[] _expected;

		public Fixture(double[] _input, String[] _expected) {
			this._input = _input;
			this._expected = _expected;
		}
	}
}