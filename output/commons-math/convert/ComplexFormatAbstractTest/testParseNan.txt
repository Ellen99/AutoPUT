/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.commons.math4.complex;

import java.text.FieldPosition;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.util.Arrays;
import java.util.Locale;

import org.apache.commons.math4.exception.MathIllegalArgumentException;
import org.apache.commons.math4.exception.NoDataException;
import org.apache.commons.math4.exception.NullArgumentException;
import org.junit.Test;
import org.junit.Assert;
import org.apache.commons.math4.complex.Complex;
import org.apache.commons.math4.complex.ComplexFormat;
import org.apache.commons.math4.util.FastMath;
import org.junit.runner.RunWith;
import org.junit.experimental.theories.Theories;
import org.junit.experimental.theories.Theory;
import org.junit.experimental.theories.DataPoints;

public abstract @RunWith(Theories.class) class AutoPutTest {

    ComplexFormat complexFormat = null;
    ComplexFormat complexFormatJ = null;

    protected abstract Locale getLocale();

    protected abstract char getDecimalCharacter();

    protected AutoPutTest() {
        complexFormat = ComplexFormat.getInstance(getLocale());
        complexFormatJ = ComplexFormat.getInstance("j", getLocale());
    }

    @Theory
	public void autoPutTest(Fixture fixture) {
        String source = fixture._input;
        Complex expected = new Complex(fixture._expected[0], fixture._expected[1]);
        Complex actual = complexFormat.parse(source);
        Assert.assertEquals(expected, actual);
    }

    private static String INPUT1 = "(NaN) + (NaN)i";

	private static double[] EXPECTED1 = { Double.NaN, Double.NaN };

	private static String INPUT2 = "(Infinity) + (Infinity)i";

	private static double[] EXPECTED2 = { Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY };

	private static String INPUT3 = "(-Infinity) - (Infinity)i";

	private static double[] EXPECTED3 = { Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY };

	@DataPoints public static Fixture[] DATA={new Fixture(INPUT1,EXPECTED1),new Fixture(INPUT2,EXPECTED2),new Fixture(INPUT3,EXPECTED3)};

	public static class Fixture {
		private String _input;
		private double[] _expected;

		public Fixture(String _input, double[] _expected) {
			this._input = _input;
			this._expected = _expected;
		}
	}
}