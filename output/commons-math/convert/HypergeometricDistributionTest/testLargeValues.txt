/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.commons.math4.distribution;

import org.apache.commons.math4.TestUtils;
import org.apache.commons.math4.distribution.HypergeometricDistribution;
import org.apache.commons.math4.distribution.IntegerDistribution;
import org.apache.commons.math4.exception.NotPositiveException;
import org.apache.commons.math4.exception.NotStrictlyPositiveException;
import org.apache.commons.math4.exception.NumberIsTooLargeException;
import org.apache.commons.numbers.core.Precision;
import org.apache.commons.rng.simple.RandomSource;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.experimental.theories.Theories;
import org.junit.experimental.theories.Theory;
import org.junit.experimental.theories.DataPoints;

/**
 * Test cases for HyperGeometriclDistribution.
 * Extends IntegerDistributionAbstractTest.  See class javadoc for
 * IntegerDistributionAbstractTest for details.
 *
 */
public @RunWith(Theories.class) class AutoPutTest extends IntegerDistributionAbstractTest {

    /**
     * Constructor to override default tolerance.
     */
    public AutoPutTest() {
        setTolerance(1e-12);
    }

    //-------------- Implementations for abstract methods -----------------------

    /** Creates the default discrete distribution instance to use in tests. */
    @Override
    public IntegerDistribution makeDistribution() {
        return new HypergeometricDistribution(10, 5, 5);
    }

    /** Creates the default probability density test input values */
    @Override
    public int[] makeDensityTestPoints() {
        return new int[] {-1, 0, 1, 2, 3, 4, 5, 10};
    }

    /**
     * Creates the default probability density test expected values
     * Reference values are from R, version 2.15.3.
     */
    @Override
    public double[] makeDensityTestValues() {
        return new double[] {0d, 0.00396825396825, 0.0992063492063, 0.396825396825, 0.396825396825,
            0.0992063492063, 0.00396825396825, 0d};
    }

    /**
     * Creates the default probability log density test expected values
     * Reference values are from R, version 2.14.1.
     */
    @Override
    public double[] makeLogDensityTestValues() {
        //-Inf  -Inf
        return new double[] {Double.NEGATIVE_INFINITY, -5.52942908751142, -2.31055326264322, -0.924258901523332,
                -0.924258901523332, -2.31055326264322, -5.52942908751142, Double.NEGATIVE_INFINITY};
    }

    /** Creates the default cumulative probability density test input values */
    @Override
    public int[] makeCumulativeTestPoints() {
        return makeDensityTestPoints();
    }

    /**
     * Creates the default cumulative probability density test expected values
     * Reference values are from R, version 2.15.3.
     */
    @Override
    public double[] makeCumulativeTestValues() {
        return new double[] {0d, 0.00396825396825, 0.103174603175, .5, 0.896825396825, 0.996031746032,
                1, 1};
    }

    /** Creates the default inverse cumulative probability test input values */
    @Override
    public double[] makeInverseCumulativeTestPoints() {
        return new double[] {0d, 0.001d, 0.010d, 0.025d, 0.050d, 0.100d, 0.999d,
                0.990d, 0.975d, 0.950d, 0.900d, 1d};
    }

    /** Creates the default inverse cumulative probability density test expected values */
    @Override
    public int[] makeInverseCumulativeTestValues() {
        return new int[] {0, 0, 1, 1, 1, 1, 5, 4, 4, 4, 4, 5};
    }

    //-------------------- Additional test cases ------------------------------

    @Theory
	public void autoPutTest(Fixture fixture) {
        int populationSize = fixture._input[0];
        int sampleSize = fixture._input[1];
        int numberOfSucceses = fixture._input[2];
        double[][] data = {
            {0.0, fixture._input[3], fixture._input[4], 1.0},
            {1.0, fixture._input[5], fixture._input[6], fixture._input[7]},
            {2.0, fixture._input[8], fixture._input[9], fixture._input[10]},
            {3.0, (int) fixture._input[11], fixture._input[12], fixture._input[13]},
            {4.0, fixture._input[14], fixture._input[15], (int) fixture._input[16]},
            {5.0, fixture._input[17], fixture._input[18], fixture._input[19]},
            {20.0, fixture._input[20], (int) fixture._input[21], fixture._input[22]},
            {21.0, fixture._input[23], fixture._input[24], fixture._input[25]},
            {22.0, fixture._input[26], fixture._input[27], fixture._input[28]},
            {23.0, fixture._input[29], fixture._input[30], fixture._input[31]},
            {24.0, fixture._input[32], fixture._input[33], fixture._input[34]},
            {25.0, fixture._input[35], fixture._input[36], fixture._input[37]},
            {fixture._input[38], fixture._input[39], 1.0, fixture._input[40]},
            {fixture._input[41], fixture._input[42], 1.0, fixture._input[43]},
            {fixture._input[44], fixture._input[45], 1.0, fixture._input[46]},
            {fixture._input[47], fixture._input[48], 1.0, fixture._input[49]},
            {fixture._input[50], fixture._input[51], 1.0, fixture._input[52]},
            {fixture._input[53], fixture._input[54], 1.0, fixture._input[55]},
        };

        testHypergeometricDistributionProbabilities(populationSize, sampleSize, numberOfSucceses, data);
    }

    private void testHypergeometricDistributionProbabilities(int populationSize, int sampleSize, int numberOfSucceses, double[][] data) {
        HypergeometricDistribution dist = new HypergeometricDistribution(populationSize, numberOfSucceses, sampleSize);
        for (int i = 0; i < data.length; ++i) {
            int x = (int)data[i][0];
            double pmf = data[i][1];
            double actualPmf = dist.probability(x);
            TestUtils.assertRelativelyEquals("Expected equals for <"+x+"> pmf",pmf, actualPmf, 1.0e-9);

            double cdf = data[i][2];
            double actualCdf = dist.cumulativeProbability(x);
            TestUtils.assertRelativelyEquals("Expected equals for <"+x+"> cdf",cdf, actualCdf, 1.0e-9);

            double cdf1 = data[i][3];
            double actualCdf1 = dist.upperCumulativeProbability(x);
            TestUtils.assertRelativelyEquals("Expected equals for <"+x+"> cdf1",cdf1, actualCdf1, 1.0e-9);
        }
    }

    private static double[] INPUT1 = { 3456, 789, 101, 2.75646034603961e-12, 2.75646034603961e-12, 8.55705370142386e-11,
			8.83269973602783e-11, 0.999999999997244, 1.31288129219665e-9, 1.40120828955693e-9, 0.999999999911673,
			1.32724172984193e-8, 1.46736255879763e-8, 0.999999998598792, 9.94501711734089e-8, 1.14123796761385e-7,
			0.999999985326375, 5.89080768883643e-7, 7.03204565645028e-7, 0.999999885876203, 0.0760051397707708,
			0.27349758476299, 0.802507555007781, 0.087144222047629, 0.360641806810619, 0.72650241523701,
			0.0940378846881819, 0.454679691498801, 0.639358193189381, 0.0956897500614809, 0.550369441560282,
			0.545320308501199, 0.0919766921922999, 0.642346133752582, 0.449630558439718, 0.083641637261095,
			0.725987771013677, 0.357653866247418, 96.0, 5.93849188852098e-57, 6.01900244560712e-57, 97.0,
			7.96593036832547e-59, 8.05105570861321e-59, 98.0, 8.44582921934367e-61, 8.5125340287733e-61, 99.0,
			6.63604297068222e-63, 6.670480942963e-63, 100.0, 3.43501099007557e-65, 3.4437972280786e-65, 101.0,
			8.78623800302957e-68, 8.78623800302957e-68 };

	private static Object EXPECTED1 = null;

	private static double[] INPUT2 = { 26896, 895, 55, 0.155168304750504, 0.155168304750504, 0.29437545000746,
			0.449543754757964, 0.844831695249496, 0.273841321577003, 0.723385076334967, 0.550456245242036,
			0.166488572570786, 0.889873648905753, 0.276614923665033, 0.0743969744713231, 0.964270623377076,
			0.110126351094247, 0.0260542785784855, 0.990324901955562, 0.0357293766229237, 3.57101101678792e-16, 1.0,
			3.78252101622096e-16, 2.00551638598312e-17, 1.0, 2.11509999433041e-17, 1.04317070180562e-18, 1.0,
			1.09583608347287e-18, 5.03153504903308e-20, 1.0, 5.266538166725e-20, 2.2525984149695e-21, 1.0,
			2.35003117691919e-21, 9.3677424515947e-23, 1.0, 9.74327619496943e-23, 50.0, 9.83633962945521e-69,
			9.8677629437617e-69, 51.0, 3.13448949497553e-71, 3.14233143064882e-71, 52.0, 7.82755221928122e-74,
			7.84193567329055e-74, 53.0, 1.43662126065532e-76, 1.43834540093295e-76, 54.0, 1.72312692517348e-79,
			1.7241402776278e-79, 55.0, 1.01335245432581e-82, 1.01335245432581e-82 };

	private static Object EXPECTED2 = null;

	@DataPoints public static Fixture[] DATA={new Fixture(INPUT1,EXPECTED1),new Fixture(INPUT2,EXPECTED2)};

	public static class Fixture {
		private double[] _input;
		private Object _expected;

		public Fixture(double[] _input, Object _expected) {
			this._input = _input;
			this._expected = _expected;
		}
	}
}