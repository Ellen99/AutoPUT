/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.commons.math4.geometry.euclidean.threed;

import org.apache.commons.numbers.angle.PlaneAngleRadians;
import org.apache.commons.math4.exception.MathArithmeticException;
import org.apache.commons.math4.exception.MathIllegalArgumentException;
import org.apache.commons.math4.geometry.euclidean.threed.CardanEulerSingularityException;
import org.apache.commons.math4.geometry.euclidean.threed.NotARotationMatrixException;
import org.apache.commons.math4.geometry.euclidean.threed.Rotation;
import org.apache.commons.math4.geometry.euclidean.threed.RotationOrder;
import org.apache.commons.math4.geometry.euclidean.threed.Cartesian3D;
import org.apache.commons.math4.util.FastMath;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameters;


public @RunWith(Parameterized.class) class RotationTest {

  @Test
  public void testAxisAngleVectorOperator() throws MathIllegalArgumentException {

    Rotation r = new Rotation(new Cartesian3D(10, 10, 10), 2 * FastMath.PI / 3, _input[0]);
    checkVector(r.applyTo(Cartesian3D.PLUS_I), _input[1]);
    checkVector(r.applyTo(Cartesian3D.PLUS_J), _input[2]);
    checkVector(r.applyTo(Cartesian3D.PLUS_K), _input[3]);
    double s = 1 / FastMath.sqrt(3);
    checkVector(r.getAxis(_input[4]), new Cartesian3D( s,  s,  s));
    checkVector(r.getAxis(_input[5]), new Cartesian3D(-s, -s, -s));
    checkAngle(r.getAngle(), 2 * FastMath.PI / 3);

    try {
      new Rotation(new Cartesian3D(0, 0, 0), 2 * FastMath.PI / 3, _input[6]);
      Assert.fail("an exception should have been thrown");
    } catch (MathIllegalArgumentException e) {
    }

    r = new Rotation(Cartesian3D.PLUS_K, 1.5 * FastMath.PI, _input[7]);
    checkVector(r.getAxis(_input[8]), new Cartesian3D(0, 0, -1));
    checkVector(r.getAxis(_input[9]), new Cartesian3D(0, 0, +1));
    checkAngle(r.getAngle(), 0.5 * FastMath.PI);

    r = new Rotation(Cartesian3D.PLUS_J, FastMath.PI, _input[10]);
    checkVector(r.getAxis(_input[11]), Cartesian3D.PLUS_J);
    checkVector(r.getAxis(_input[12]), Cartesian3D.MINUS_J);
    checkAngle(r.getAngle(), FastMath.PI);

    checkVector(Rotation.IDENTITY.getAxis(_input[13]), _input[14]);
    checkVector(Rotation.IDENTITY.getAxis(_input[15]), _input[16]);

  }

  private void checkVector(Cartesian3D v1, Cartesian3D v2) {
    Assert.assertTrue(v1.subtract(v2).getNorm() < 1.0e-10);
  }

  private void checkAngle(double a1, double a2) {
    Assert.assertEquals(a1, PlaneAngleRadians.normalize(a2, a1), 1.0e-10);
  }

  private void checkRotation(Rotation r, double q0, double q1, double q2, double q3) {
    Assert.assertEquals(0, Rotation.distance(r, new Rotation(q0, q1, q2, q3, false)), 1.0e-12);
  }

@Parameters public static Collection<Object[]> data(){return Arrays.asList(new Object[][]{{{RotationConvention.VECTOR_OPERATOR,Cartesian3D.PLUS_J,Cartesian3D.PLUS_K,Cartesian3D.PLUS_I,RotationConvention.VECTOR_OPERATOR,RotationConvention.FRAME_TRANSFORM,RotationConvention.VECTOR_OPERATOR,RotationConvention.VECTOR_OPERATOR,RotationConvention.VECTOR_OPERATOR,RotationConvention.FRAME_TRANSFORM,RotationConvention.VECTOR_OPERATOR,RotationConvention.VECTOR_OPERATOR,RotationConvention.FRAME_TRANSFORM,RotationConvention.VECTOR_OPERATOR,Cartesian3D.PLUS_I,RotationConvention.FRAME_TRANSFORM,Cartesian3D.MINUS_I},{}},{{RotationConvention.FRAME_TRANSFORM,Cartesian3D.PLUS_K,Cartesian3D.PLUS_I,Cartesian3D.PLUS_J,RotationConvention.FRAME_TRANSFORM,RotationConvention.VECTOR_OPERATOR,RotationConvention.FRAME_TRANSFORM,RotationConvention.FRAME_TRANSFORM,RotationConvention.FRAME_TRANSFORM,RotationConvention.VECTOR_OPERATOR,RotationConvention.FRAME_TRANSFORM,RotationConvention.FRAME_TRANSFORM,RotationConvention.VECTOR_OPERATOR,RotationConvention.FRAME_TRANSFORM,Cartesian3D.MINUS_I,RotationConvention.VECTOR_OPERATOR,Cartesian3D.PLUS_I},{}}});}

private Object[] _input;
private Object _expected;

public AutoPUT(Object[] _input, Object _expected) {
	this._input = _input;
	this._expected = _expected;
}

}