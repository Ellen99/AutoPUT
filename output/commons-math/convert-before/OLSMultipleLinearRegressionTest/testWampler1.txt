/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.commons.math4.stat.regression;


import org.apache.commons.math4.TestUtils;
import org.apache.commons.math4.exception.MathIllegalArgumentException;
import org.apache.commons.math4.exception.NullArgumentException;
import org.apache.commons.math4.linear.Array2DRowRealMatrix;
import org.apache.commons.math4.linear.DefaultRealMatrixChangingVisitor;
import org.apache.commons.math4.linear.MatrixUtils;
import org.apache.commons.math4.linear.RealMatrix;
import org.apache.commons.math4.linear.RealVector;
import org.apache.commons.math4.stat.StatUtils;
import org.apache.commons.math4.stat.regression.OLSMultipleLinearRegression;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameters;

public @RunWith(Parameterized.class) class OLSMultipleLinearRegressionTest extends MultipleLinearRegressionAbstractTest {

    @Before
    @Override
    public void setUp(){
        y = new double[]{11.0, 12.0, 13.0, 14.0, 15.0, 16.0};
        x = new double[6][];
        x[0] = new double[]{0, 0, 0, 0, 0};
        x[1] = new double[]{2.0, 0, 0, 0, 0};
        x[2] = new double[]{0, 3.0, 0, 0, 0};
        x[3] = new double[]{0, 0, 4.0, 0, 0};
        x[4] = new double[]{0, 0, 0, 5.0, 0};
        x[5] = new double[]{0, 0, 0, 0, 6.0};
        super.setUp();
    }

    @Override
    protected OLSMultipleLinearRegression createRegression() {
        OLSMultipleLinearRegression regression = new OLSMultipleLinearRegression();
        regression.newSampleData(y, x);
        return regression;
    }

    @Override
    protected int getNumberOfRegressors() {
        return x[0].length + 1;
    }

    @Override
    protected int getSampleSize() {
        return y.length;
    }

    @Test(expected=MathIllegalArgumentException.class)
    public void cannotAddSampleDataWithSizeMismatch() {
        double[] y = new double[]{1.0, 2.0};
        double[][] x = new double[1][];
        x[0] = new double[]{1.0, 0};
        createRegression().newSampleData(y, x);
    }

    /**
     * Verifies that calculateYVariance and calculateResidualVariance return consistent
     * values with direct variance computation from Y, residuals, respectively.
     */
    protected void checkVarianceConsistency(OLSMultipleLinearRegression model) {
        // Check Y variance consistency
        TestUtils.assertEquals(StatUtils.variance(model.getY().toArray()), model.calculateYVariance(), 0);

        // Check residual variance consistency
        double[] residuals = model.calculateResiduals().toArray();
        RealMatrix X = model.getX();
        TestUtils.assertEquals(
                StatUtils.variance(model.calculateResiduals().toArray()) * (residuals.length - 1),
                model.calculateErrorVariance() * (X.getRowDimension() - X.getColumnDimension()), 1E-20);

    }

    /*
     * This is a test based on the Wampler1 data set
     * http://www.itl.nist.gov/div898/strd/lls/data/Wampler1.shtml
     */
    @Test
    public void testWampler1() {
        double[] data = new double[]{
            _input[0], 0,
            _input[1], 1,
            _input[2], 2,
            _input[3], 3,
            _input[4], 4,
            _input[5], 5,
            _input[6], 6,
            _input[7], 7,
            _input[8], 8,
            _input[9], 9,
            _input[10], 10,
            _input[11], 11,
            _input[12], 12,
            _input[13], 13,
            _input[14], 14,
            _input[15], 15,
            _input[16], 16,
            _input[17], 17,
            _input[18], 18,
            _input[19], 19,
            _input[20], 20};
        OLSMultipleLinearRegression model = new OLSMultipleLinearRegression();


        final int nvars = 5;
        final int nobs = 21;
        double[] tmp = new double[(nvars + 1) * nobs];
        int off = 0;
        int off2 = 0;
        for (int i = 0; i < nobs; i++) {
            tmp[off2] = data[off];
            tmp[off2 + 1] = data[off + 1];
            tmp[off2 + 2] = tmp[off2 + 1] * tmp[off2 + 1];
            tmp[off2 + 3] = tmp[off2 + 1] * tmp[off2 + 2];
            tmp[off2 + 4] = tmp[off2 + 1] * tmp[off2 + 3];
            tmp[off2 + 5] = tmp[off2 + 1] * tmp[off2 + 4];
            off2 += (nvars + 1);
            off += 2;
        }
        model.newSampleData(tmp, nobs, nvars);
        double[] betaHat = model.estimateRegressionParameters();
        TestUtils.assertEquals(betaHat,
                new double[]{1.0,
                    1.0, 1.0,
                    1.0, 1.0,
                    1.0}, _input[21]);

        double[] se = model.estimateRegressionParametersStandardErrors();
        TestUtils.assertEquals(se,
                new double[]{_input[22],
                    _input[23], _input[24],
                    _input[25], _input[26],
                    _input[27]}, 1E-8);

        TestUtils.assertEquals(_input[28], model.calculateRSquared(), 1.0e-10);
        TestUtils.assertEquals(_input[29], model.estimateErrorVariance(), _input[30]);
        TestUtils.assertEquals(_input[31], model.calculateResidualSumOfSquares(), _input[32]);

        return;
    }

    @Parameters public static Collection<Object[]> data(){return Arrays.asList(new Object[][]{{{1,6,63,364,1365,3906,9331,19608,37449,66430,111111,177156,271453,402234,579195,813616,1118481,1508598,2000719,2613660,3368421,1E-8,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0,1.0e-7,0.00,1.0e-6},{}},{{1.00000,1.11111,1.24992,1.42753,1.65984,1.96875,2.38336,2.94117,3.68928,4.68559,6.00000,7.71561,9.92992,12.75603,16.32384,20.78125,26.29536,33.05367,41.26528,51.16209,63.00000,1E-8,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0,1.0e-7,0.00,1.0e-6},{}},{{760,-2042,2111,-1684,3888,1858,11379,17560,39287,64382,113159,175108,273291,400186,581243,811568,1121004,1506550,2002767,2611612,3369180,1E-8,2152.32624678170,2363.55173469681,779.343524331583,101.475507550350,5.64566512170752,0.112324854679312,.999995559025820,5570284.53333333,1.0e-6,83554268.0000000,1.0e-5},{}},{{75901,-204794,204863,-204436,253665,-200894,214131,-185192,221249,-138370,315911,-27644,455253,197434,783995,608816,1370781,1303798,2205519,2408860,3444321,1E-6,215232.624678170,236355.173469681,77934.3524331583,10147.5507550350,564.566512170752,11.2324854679312,.957478440825662,55702845333.3333,1.0e-4,835542680000.000,1.0e-3},{}}});}

	private double[] _input;
	private Object _expected;

	public AutoPUT(double[] _input, Object _expected) {
		this._input = _input;
		this._expected = _expected;
	}
}