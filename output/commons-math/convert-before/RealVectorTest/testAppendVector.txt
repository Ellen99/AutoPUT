/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.commons.math4.linear;

import java.util.Iterator;

import org.apache.commons.math4.linear.RealVector;
import org.apache.commons.math4.linear.RealVector.Entry;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameters;

/**
 * Tests for {@link RealVector}.
 */
public @RunWith(Parameterized.class) class RealVectorTest extends RealVectorAbstractTest{

    @Override
    public RealVector create(final double[] data) {
        return new RealVectorTestImpl(data);
    }

    @Test
    @Ignore(_input)
    @Override
    public void testAppendVector() {
        // Do nothing
    }

    @Parameters public static Collection<Object[]> data(){return Arrays.asList(new Object[][]{{"Abstract class RealVector does not implement append(RealVector).",{}},{"Abstract class RealVector does not implement append(double)",{}},{"Abstract class RealVector does not implement getSubvector(int, int)",{}},{"Abstract class RealVector does not implement getSubvector(int, int)",{}},{"Abstract class RealVector does not implement getSubvector(int, int)",{}},{"Abstract class RealVector does not implement getSubvector(int, int)",{}},{"Abstract class RealVector does not implement getSubvector(int, int)",{}},{"Abstract class RealVector does not implement setSubvector(int, RealVector)",{}},{"Abstract class RealVector does not implement setSubvector(int, RealVector)",{}},{"Abstract class RealVector does not implement setSubvector(int, RealVector)",{}},{"Abstract class RealVector does not implement setSubvector(int, RealVector)",{}},{"Abstract class RealVector does not implement setSubvector(int, RealVector)",{}},{"Abstract class RealVector does not implement isNaN()",{}},{"Abstract class RealVector does not implement isNaN()",{}},{"Abstract class RealVector does not implement ebeMultiply(RealVector)",{}},{"Abstract class RealVector does not implement ebeMultiply(RealVector)",{}},{"Abstract class RealVector does not implement ebeMultiply(RealVector)",{}},{"Abstract class RealVector does not implement ebeDivide(RealVector)",{}},{"Abstract class RealVector does not implement ebeDivide(RealVector)",{}},{"Abstract class RealVector does not implement ebeDivide(RealVector)",{}},{"Abstract class RealVector does not implement getL1Norm()",{}},{"Abstract class RealVector does not implement getLInfNorm()",{}},{"Abstract class RealVector is not serializable.",{}},{"Abstract class RealVector does not override equals(Object).",{}}});}

	private String _input;
	private Object _expected;

	public AutoPUT(String _input, Object _expected) {
		this._input = _input;
		this._expected = _expected;
	}
}