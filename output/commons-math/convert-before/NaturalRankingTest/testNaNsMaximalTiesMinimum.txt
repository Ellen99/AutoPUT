/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.commons.math4.stat.ranking;

import org.junit.Assert;
import org.apache.commons.math4.TestUtils;
import org.apache.commons.math4.exception.NotANumberException;
import org.apache.commons.math4.stat.ranking.NaNStrategy;
import org.apache.commons.math4.stat.ranking.NaturalRanking;
import org.apache.commons.math4.stat.ranking.TiesStrategy;
import org.junit.Test;
import org.junit.Ignore;
import org.apache.commons.rng.UniformRandomProvider;
import org.apache.commons.rng.simple.RandomSource;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameters;


/**
 * Test cases for NaturalRanking class
 *
 * @since 2.0
 */
public @RunWith(Parameterized.class) class NaturalRankingTest {

    @Test
    public void testNaNsMaximalTiesMinimum() {
        NaturalRanking ranking = new NaturalRanking(_input[0], _input[1]);
        double[] ranks = ranking.rank(exampleData);
        double[] correctRanks = { _input[2], _input[3], _input[4], _input[5], _input[6], _input[7], _input[8], _input[9], _input[10] };
        TestUtils.assertEquals(correctRanks, ranks, 0d);
        ranks = ranking.rank(tiesFirst);
        correctRanks = new double[] { _input[11], _input[12], 4, 3, 5 };
        TestUtils.assertEquals(correctRanks, ranks, 0d);
        ranks = ranking.rank(tiesLast);
        correctRanks = new double[] { _input[13], _input[14], 2, 1 };
        TestUtils.assertEquals(correctRanks, ranks, 0d);
        ranks = ranking.rank(multipleNaNs);
        correctRanks = new double[] { _input[15], _input[16], _input[17], _input[18] };
        TestUtils.assertEquals(correctRanks, ranks, 0d);
        ranks = ranking.rank(multipleTies);
        correctRanks = new double[] { 3, 2, _input[19], _input[20], _input[21], _input[22], 1 };
        TestUtils.assertEquals(correctRanks, ranks, 0d);
        ranks = ranking.rank(allSame);
        correctRanks = new double[] { _input[23], _input[24], _input[25], _input[26] };
        TestUtils.assertEquals(correctRanks, ranks, 0d);
    }

    @Parameters public static Collection<Object[]> data(){return Arrays.asList(new Object[][]{{{NaNStrategy.MAXIMAL,TiesStrategy.MINIMUM,5,2,6,7,2,8,9,1,2,1,1,3,3,1,2,3,3,4,4,6,6,1,1,1,1},{}},{{NaNStrategy.MINIMAL,TiesStrategy.MAXIMUM,6,5,7,8,5,9,2,2,5,2,2,4,4,3,4,2,2,5,5,7,7,4,4,4,4},{}}});}

	private Object[] _input;
	private Object _expected;

	public AutoPUT(Object[] _input, Object _expected) {
		this._input = _input;
		this._expected = _expected;
	}

}