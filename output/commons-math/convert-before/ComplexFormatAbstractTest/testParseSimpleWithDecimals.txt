/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.commons.math4.complex;

import java.text.FieldPosition;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.util.Arrays;
import java.util.Locale;

import org.apache.commons.math4.exception.MathIllegalArgumentException;
import org.apache.commons.math4.exception.NoDataException;
import org.apache.commons.math4.exception.NullArgumentException;
import org.junit.Test;
import org.junit.Assert;
import org.apache.commons.math4.complex.Complex;
import org.apache.commons.math4.complex.ComplexFormat;
import org.apache.commons.math4.util.FastMath;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameters;

public abstract @RunWith(Parameterized.class) class ComplexFormatAbstractTest {

    protected abstract Locale getLocale();

    protected abstract char getDecimalCharacter();

    @Test
    public void testParseSimpleWithDecimals() {
        String source = _input[0] + getDecimalCharacter() + _input[1] + getDecimalCharacter() + _input[2];
        Complex expected = new Complex(_expected[0], _expected[1]);
        Complex actual = complexFormat.parse(source);
        Assert.assertEquals(expected, actual);
    }

    @Parameters public static Collection<Object[]> data(){return Arrays.asList(new Object[][]{{{"1","23 + 1","43i"},{1.23,1.43}},{{"1","232323232323 + 1","434343434343i"},{1.232323232323,1.434343434343}},{{"-1","232323232323 + 1","4343i"},{-1.232323232323,1.4343}},{{"1","2323 - 1","434343434343i"},{1.2323,-1.434343434343}},{{"-1","232323232323 - 1","434343434343i"},{-1.232323232323,-1.434343434343}},{{"0","0 - 1","4343i"},{0.0,-1.4343}},{{"-1","2323 - 1","4343j"},{-1.2323,-1.4343}}});}

	private String[] _input;
	private double[] _expected;

	public AutoPUT(String[] _input, double[] _expected) {
		this._input = _input;
		this._expected = _expected;
	}
}