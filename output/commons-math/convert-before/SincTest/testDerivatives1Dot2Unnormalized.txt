/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.commons.math4.analysis.function;

import org.apache.commons.math4.analysis.UnivariateFunction;
import org.apache.commons.math4.analysis.differentiation.DerivativeStructure;
import org.apache.commons.math4.dfp.Dfp;
import org.apache.commons.math4.dfp.DfpField;
import org.apache.commons.math4.dfp.DfpMath;
import org.apache.commons.math4.util.FastMath;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameters;

public @RunWith(Parameterized.class) class SincTest {

   @Test
   public void testDerivatives1Dot2Unnormalized() {
       DerivativeStructure s = new Sinc(_input[0]).value(new DerivativeStructure(1, 5, 0, 1.2));
       Assert.assertEquals( _input[1], s.getPartialDerivative(0), _input[2]);
       Assert.assertEquals(_input[3], s.getPartialDerivative(1), _input[4]);
       Assert.assertEquals(_input[5],  s.getPartialDerivative(2), _input[6]);
       Assert.assertEquals( _input[7],  s.getPartialDerivative(3), _input[8]);
       Assert.assertEquals( _input[9],   s.getPartialDerivative(4), _input[10]);
       Assert.assertEquals(_input[11],  s.getPartialDerivative(5), _input[12]);
   }

   @Parameters public static Collection<Object[]> data(){return Arrays.asList(new Object[][]{{{false,0.77669923830602195806,1.0e-16,-0.34528456985779031701,1.0e-16,-0.2012249552097047631,1.0e-16,0.2010975926270339262,4.0e-16,0.106373929549242204,1.0e-15,-0.1412599110579478695,3.0e-15},{}},{{true,-0.15591488063143983888,6.0e-17,-0.54425176145292298767,2.0e-16,2.4459044611635856107,9.0e-16,0.5391369206235909586,7.0e-16,-16.984649869728849865,8.0e-15,5.0980327462666316586,9.0e-15},{}}});}

private Object[] _input;
private Object _expected;

public AutoPUT(Object[] _input, Object _expected) {
	this._input = _input;
	this._expected = _expected;
}
}