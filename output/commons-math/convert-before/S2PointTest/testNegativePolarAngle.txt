/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.commons.math4.geometry.spherical.twod;

import org.apache.commons.math4.exception.OutOfRangeException;
import org.apache.commons.math4.geometry.spherical.oned.Sphere1D;
import org.apache.commons.math4.geometry.spherical.twod.S2Point;
import org.apache.commons.math4.geometry.spherical.twod.Sphere2D;
import org.apache.commons.math4.util.FastMath;
import org.apache.commons.math4.util.MathUtils;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameters;

public @RunWith(Parameterized.class) class S2PointTest {


    @Test(expected=OutOfRangeException.class)
    public void testNegativePolarAngle() {
        new S2Point(1.0, _input);
    }

    @Parameters public static Collection<Object[]> data(){return Arrays.asList(new Object[][]{{-1.0,{}},{3.5,{}}});}

	private double _input;
	private Object _expected;

	public AutoPUT(double _input, Object _expected) {
		this._input = _input;
		this._expected = _expected;
	}

}