package org.jdom2.test.cases.input;

import static org.junit.Assert.*;

import org.jdom2.DocType;
import org.jdom2.JDOMException;
import org.jdom2.JDOMFactory;
import org.jdom2.DefaultJDOMFactory;
import org.jdom2.input.stax.DTDParser;
import org.jdom2.test.util.UnitTestUtil;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameters;

@SuppressWarnings("javadoc")
public @RunWith(Parameterized.class) class TestDTDParser {

	@Test
	public void testParseSimpleCompactInternal() throws JDOMException {
		DocType dt = DTDParser.parse(
				_input, 
				factory);
		
		assertEquals("root", dt.getElementName());
		assertEquals(null, dt.getPublicID());
		assertEquals(null, dt.getSystemID());
		assertEquals(_expected, dt.getInternalSubset());
	}

	@Parameters public static Collection<Object[]> data(){return Arrays.asList(new Object[][]{{"<!DOCTYPE root[internal]>","internal"},{"<!DOCTYPE root [<!ELEMENT root (#PCDATA)><!ENTITY xpd 'Expand Me!' >]>","  <!ELEMENT root (#PCDATA)>\n  <!ENTITY xpd 'Expand Me!'>\n"},{"<!DOCTYPE root  \t \r \n [  \r \n <!ELEMENT root\n     (#PCDATA)>  \n <!ENTITY xpd \n   'Expand Me!' >\n ] \n >","  <!ELEMENT root (#PCDATA)>\n  <!ENTITY xpd 'Expand Me!'>\n"},{"<!DOCTYPE root [ <!ENTITY  ent   'entity' > ] >","  <!ENTITY ent 'entity'>\n"},{"<!DOCTYPE root [\t<!ENTITY\tent\t'entity'\t>\t]\t>","  <!ENTITY ent 'entity'>\n"},{"<!DOCTYPE root [\n<!ENTITY\nent\n'entity'\n>\n]\n>","  <!ENTITY ent 'entity'>\n"},{"<!DOCTYPE root [\r<!ENTITY\rent\r'entity'\r>\r]\r>","  <!ENTITY ent 'entity'>\n"},{"<!DOCTYPE root [<!ENTITY ent 'entity with spaces\nand newlines,\ttabs, and crs\r' >]>","  <!ENTITY ent 'entity with spaces\nand newlines,\ttabs, and crs\r'>\n"},{"<!DOCTYPE root [<!ENTITY  ent   \"entity with spaces\nand newlines,\ttabs, and crs\r\" >]>","  <!ENTITY ent \"entity with spaces\nand newlines,\ttabs, and crs\r\">\n"}});}

	private String _input;
	private String _expected;

	public AutoPUT(String _input, String _expected) {
		this._input = _input;
		this._expected = _expected;
	}

}