package org.jdom2.test.cases.input.sax;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.io.File;
import java.io.IOException;
import java.net.URL;

import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;

import org.junit.Test;

import org.jdom2.Document;
import org.jdom2.Element;
import org.jdom2.JDOMException;
import org.jdom2.Namespace;
import org.jdom2.input.SAXBuilder;
import org.jdom2.input.sax.XMLReaderJDOMFactory;
import org.jdom2.input.sax.XMLReaderXSDFactory;
import org.jdom2.test.util.FidoFetch;
import org.jdom2.test.util.UnitTestUtil;
import org.junit.runner.RunWith;
import org.junit.experimental.theories.Theories;
import org.junit.experimental.theories.Theory;
import org.junit.experimental.theories.DataPoints;

@SuppressWarnings("javadoc")
public @RunWith(Theories.class) class AutoPutTest {
	//"./test/resources/xscomplex/multi_one.xsd",
	
	private final URL filemain() {
		return FidoFetch.getFido().getURL("/xsdcomplex/multi_main.xsd");
	}
	private final URL fileone() {
		return FidoFetch.getFido().getURL("/xsdcomplex/multi_one.xsd");
	}
	
	private final URL filetwo() {
		return FidoFetch.getFido().getURL("/xsdcomplex/multi_two.xsd");
	}
	private final URL source() {
		return FidoFetch.getFido().getURL("/xsdcomplex/multi.xml");
	}

	private void checkXML(XMLReaderJDOMFactory fac) {
		SAXBuilder builder = new SAXBuilder(fac);
		try {
			Namespace nsmain = Namespace.getNamespace("http://www.jdom.org/schema_main");
			Namespace nsone  = Namespace.getNamespace("http://www.jdom.org/schema_one");
			Namespace nstwo  = Namespace.getNamespace("http://www.jdom.org/schema_two");
			
			Document doc = builder.build(source());
			assertTrue(doc.hasRootElement());
			Element root = doc.getRootElement();
			assertTrue(nsmain == root.getNamespace());
			Element childone = root.getChild("child", nsone);
			Element childtwo = root.getChild("child", nstwo);
			assertTrue(childone != null);
			assertTrue(childtwo != null);
			
			assertEquals("valueone", childone.getAttributeValue("attribute"));
			assertEquals("valuetwo", childtwo.getAttributeValue("attribute"));
			assertEquals("schema_one", childone.getAttributeValue("source"));
			assertEquals("schema_two", childtwo.getAttributeValue("source"));
		} catch (Exception e) {
			UnitTestUtil.failException("Not expecting an exception", e);
		}
		
	}
	
	@Theory
	public void autoPutTest(Fixture fixture) throws JDOMException {
		XMLReaderJDOMFactory fac = new XMLReaderXSDFactory(
				"org.apache.xerces.jaxp.SAXParserFactoryImpl", null,
				filemain(),
				fileone(),
				filetwo());
		checkXML(fac);
	}

	

	/* Broken stuff */
	
	private static Object INPUT1 = null;

	private static Object EXPECTED1 = null;

	private static Object INPUT2 = null;

	private static Object EXPECTED2 = null;

	@DataPoints public static Fixture[] DATA={new Fixture(INPUT1,EXPECTED1),new Fixture(INPUT2,EXPECTED2)};

	public static class Fixture {
		private Object _input;
		private Object _expected;

		public Fixture(Object _input, Object _expected) {
			this._input = _input;
			this._expected = _expected;
		}
	}

}