package org.jdom2.test.cases.output;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.jdom2.output.EscapeStrategy;
import org.jdom2.output.Format;
import org.jdom2.output.Format.TextMode;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.experimental.theories.Theories;
import org.junit.experimental.theories.Theory;
import org.junit.experimental.theories.DataPoints;

@SuppressWarnings("javadoc")
public @RunWith(Theories.class) class AutoPutTest {

	public static final void checkEquals(Format a, Format b) {
		assertEquals("Expect formatters to have the same Encoding", 
				a.getEncoding(), b.getEncoding());
		//assertEquals("Expect formatters to have the same EscapeStrategy", 
		//		a.getEscapeStrategy(), b.getEscapeStrategy());
		assertEquals("Expect formatters to have the same ExpandEmptyElements", 
				a.getExpandEmptyElements(), b.getExpandEmptyElements());
		assertEquals("Expect formatters to have the same TrAXEscapingPIs", 
				a.getIgnoreTrAXEscapingPIs(), b.getIgnoreTrAXEscapingPIs());
		assertEquals("Expect formatters to have the same Indent", 
				a.getIndent(), b.getIndent());
		assertEquals("Expect formatters to have the same LineSeparator", 
				a.getLineSeparator(), b.getLineSeparator());
		assertEquals("Expect formatters to have the same OmitDeclaration", 
				a.getOmitDeclaration(), b.getOmitDeclaration());
		assertEquals("Expect formatters to have the same OmitEncoding", 
				a.getOmitEncoding(), b.getOmitEncoding());
		assertEquals("Expect formatters to have the same TextMode", 
				a.getTextMode(), b.getTextMode());
		
	}



	@Theory
	public void autoPutTest(Fixture fixture) {
		checkBitEscape(fixture._input, 
				new char[] {'a', 'b', '\n', '!', (char)128, (char)255, (char)1234},
				new char[] {(char)0xD800});
	}
	
	private void checkBitEscape(String encoding, 
			char[] keep, char[] escape) {
		Format form = Format.getPrettyFormat();
		form.setEncoding(encoding);
		EscapeStrategy es = form.getEscapeStrategy();
		for (char ch : keep) {
			assertFalse("Should Not Escape " + ch, es.shouldEscape(ch));
		}
		for (char ch : escape) {
			assertTrue("Should Escape " + ch, es.shouldEscape(ch));
		}
	}
	
	private void checkTrim(String base, String both, String left, String right, String compact) {
		assertEquals(both,    Format.trimBoth(base));
		assertEquals(left,    Format.trimLeft(base));
		assertEquals(right,   Format.trimRight(base));
		assertEquals(compact, Format.compact(base));
	}
	
	private void checkEscapes(String eol, String base, String txt, String att) {
		EscapeStrategy strategy = Format.getPrettyFormat().getEscapeStrategy();
		assertEquals(txt, Format.escapeText(strategy, eol, base));
		assertEquals(att, Format.escapeAttribute(strategy, base));
	}
	
	private static String INPUT1 = "UTF-16";

	private static Object EXPECTED1 = null;

	private static String INPUT2 = "junk";

	private static Object EXPECTED2 = null;

	@DataPoints public static Fixture[] DATA={new Fixture(INPUT1,EXPECTED1),new Fixture(INPUT2,EXPECTED2)};

	public static class Fixture {
		private String _input;
		private Object _expected;

		public Fixture(String _input, Object _expected) {
			this._input = _input;
			this._expected = _expected;
		}
	}

}