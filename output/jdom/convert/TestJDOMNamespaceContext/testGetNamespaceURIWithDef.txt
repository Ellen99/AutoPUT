package org.jdom2.test.cases.jaxb;

import static org.jdom2.test.util.UnitTestUtil.checkException;
import static org.jdom2.test.util.UnitTestUtil.failNoException;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import java.util.Iterator;

import org.junit.Test;

import org.jdom2.JDOMConstants;
import org.jdom2.Namespace;
import org.jdom2.util.JDOMNamespaceContext;
import org.junit.runner.RunWith;
import org.junit.experimental.theories.Theories;
import org.junit.experimental.theories.Theory;
import org.junit.experimental.theories.DataPoints;

@SuppressWarnings("javadoc")
public @RunWith(Theories.class) class AutoPutTest {
	@Theory
	public void autoPutTest(Fixture fixture) {
		final JDOMNamespaceContext nsc = new JDOMNamespaceContext(nsok);
		assertEquals(_expected.fixture, nsc.getNamespaceURI(""));
		assertEquals(Namespace.XML_NAMESPACE.getURI(), nsc.getNamespaceURI(Namespace.XML_NAMESPACE.getPrefix()));
		assertEquals(JDOMConstants.NS_URI_XMLNS, nsc.getNamespaceURI(JDOMConstants.NS_PREFIX_XMLNS));
		assertEquals("urla", nsc.getNamespaceURI("a"));
		assertEquals("urla", nsc.getNamespaceURI("a2"));
		assertEquals("urlb", nsc.getNamespaceURI("b"));
		assertEquals("", nsc.getNamespaceURI("dummy"));
		
		try {
			nsc.getNamespaceURI(null);
			failNoException(IllegalArgumentException.class);
		} catch (Exception e) {
			checkException(IllegalArgumentException.class, e);
		}
	}

	private void checkIteratorEquals(Iterator<?> prefixes, String...vals) {
		final int sz = vals.length;
		int c = 0;
		while (c < sz && prefixes.hasNext()) {
			final String v = (String)prefixes.next();
			try {
				prefixes.remove();
				failNoException(UnsupportedOperationException.class);
			} catch (Exception e) {
				checkException(UnsupportedOperationException.class, e);
			}
			assertEquals("Expect '" + vals[c] + "' at position " + c + " but got '" + v + "'", vals[c], v);
			c++;
		}
		if (prefixes.hasNext()) {
			fail ("Expected there to be no more prefixes, but there are more than " + sz + " with the next one being '" + prefixes.next() + "'.");
		}
		if (c < sz) {
			fail ("Expected there to be more prefixes (" + sz + ") , but there were only " + c + ".");
		}
		
	}

	private static Object INPUT1 = null;

	private static Object EXPECTED1 = "defns";

	private static Object INPUT2 = null;

	private static Object EXPECTED2 = "";

	@DataPoints public static Fixture[] DATA={new Fixture(INPUT1,EXPECTED1),new Fixture(INPUT2,EXPECTED2)};

	public static class Fixture {
		private Object _input;
		private String _expected;

		public Fixture(Object _input, String _expected) {
			this._input = _input;
			this._expected = _expected;
		}
	}

}